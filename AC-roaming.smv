MODULE NF
	VAR
		model_id: 0..5;
		nfInstanceId: {none, 1, 2, 3, 4,5};
		nfType: {none, nf_1, nf_2};
		plmns: array 1..2 of 0..5; -- conditional (basically mandatory); if absent, set as per the local NRF 
		allowedNFTypes: array 1..2 of {none, nf_1, nf_2};
		allowedPlmns: array 1..2 of 0..5; 
		nfService1: NFService;

	DEFINE
		isNFInstanceValid := 
			model_id != 0
			& nfInstanceId != none
			& nfType != none
			& ( !(plmns[1] = 0 & plmns[2] = 0) ->  (plmns[1] != plmns[2] ))
			& nfService1.isServiceInstanceValid
			& ( !(allowedNFTypes[1] = none & allowedNFTypes[2] = none) ->  (allowedNFTypes[1] != allowedNFTypes[2] ))
			& ( !(allowedPlmns[1] = 0 & allowedPlmns[2] = 0) ->  (allowedPlmns[1] != allowedPlmns[2] ))
			-- populate index 1 first for all arrays
			& (plmns[2] != 0 -> plmns[1] != 0)
			& (allowedNFTypes[2] != none -> allowedNFTypes[1] != none)
			& (allowedPlmns[2] != 0 -> allowedPlmns[1] != 0)
		;
--
MODULE NFService
	VAR
		serviceName: {none, service_1, service_2};
		allowedNFTypes: array 1..2 of {none, nf_1, nf_2};
		allowedPlmns: array 1..2 of 0..5;
		operation1: Operation;

	DEFINE
		isServiceInstanceValid := 
			serviceName != none
			& ( !(allowedNFTypes[1] = none & allowedNFTypes[2] = none) ->  (allowedNFTypes[1] != allowedNFTypes[2] ))
			& ( !(allowedPlmns[1] = 0 & allowedPlmns[2] = 0) ->  (allowedPlmns[1] != allowedPlmns[2] ))
			& operation1.isOperationValid
			& operation1.opScope1 = serviceName
			-- populate index 1 first for all arrays
			& (allowedNFTypes[2] != none -> allowedNFTypes[1] != none)
			& (allowedPlmns[2] != 0 -> allowedPlmns[1] != 0)
		;

--
MODULE Operation
	VAR
		allowedNFInstances: array 1..2 of {none, 1, 2, 3, 4,5};
		allowedNFTypes: array 1..2 of {none, nf_1, nf_2};
		opName: {none, op_1, op_2};
		opScope1: {none, service_1, service_2};
		opScope2: {none, op_scope_1, op_scope_2};
		param1: Param;
	DEFINE
		isOperationValid := 
			opName != none
			& opScope1 in {none, service_1, service_2}
			& opScope2 in {none, op_scope_1, op_scope_2}
			& (opScope2 = none <-> ((allowedNFTypes[1] = none & allowedNFTypes[2] = none) & (allowedNFInstances[1] = none & allowedNFInstances[2] = none)))
			& (param1.name = none -> param1.value = 0)
			& (param1.isSensitive -> param1.name != none)
		;
		isParamVerified :=
			isOperationValid 
			& param1.isParamVerified 
		;
--
MODULE Param
	VAR
		isSensitive: boolean;
		name: {none, p1, p2, p3, p4};
		value: 0..2;
		isVerified : boolean;

	DEFINE
		isParamVerificationReq := !(name in {none}) & isSensitive;
		isParamVerified := 
		case
			!isParamVerificationReq : TRUE;
			isParamVerificationReq & isVerified: TRUE;
			isParamVerificationReq & !isVerified: FALSE;
			TRUE: FALSE;
		esac;
--
MODULE NFDiscoveryRequest(modelParam)
	VAR
		requesterID : {none, 1, 2, 3, 4,5}; -- req for slice; conflicting spec
		requesterNFType : {none, nf_1, nf_2}; -- req
		requesterPlmn: 0..5; -- req for roaming; optional for non-roaming;
		targetNFType : {none, nf_1, nf_2}; -- req
		serviceName : {none, service_1, service_2}; -- mandatory for slices, otherwise optional; conflicting spec;
		targetNfInstanceId : {none, 1, 2, 3, 4,5}; -- optional
		targetPlmns: 0..5; -- req when (1) nfp serves multiple plmns but shares a common plmn; (2) for roaming. (Nfc-vNRF) present, (vNRF->hNRF) may be absent;
	
	ASSIGN
		---------- begin NFDiscoveryRequest init ----------
		init(requesterID) := none;
		init(targetNFType) := none;
		init(requesterNFType) := none;
		init(serviceName) := none;
		init(targetNfInstanceId) := none;
		init(targetPlmns) := 0;
		init(requesterPlmn) := 0;
	DEFINE
		isNFDiscReqValid :=
			requesterID != none
			& targetNFType != none
			& requesterNFType != none -- underspecified; mandatory for slices
			& targetPlmns != 0 
			& requesterPlmn != 0 
			& targetPlmns != requesterPlmn
			-- limitation: assumes inter-plmn == roaming
		;

--
MODULE AccessTokenRequest(modelParam)
	VAR
		nfInstanceId : {none, 1, 2, 3, 4,5}; -- requester nfInstanceId
		requesterNFType : {none, nf_1, nf_2}; -- not included for specific producer
		requesterPlmn: 0..5; -- not equired for non-roaming case
		scopeService : {none, service_1, service_2};
		scopeOperation : {none, op_scope_1, op_scope_2};
		targetNFType : {none, nf_1, nf_2}; -- not included for specific producer
		targetNfInstanceId : {none, 1, 2, 3, 4,5}; -- not included for specific nfType
		targetPlmn: 0..5; -- not equired for non-roaming case

	ASSIGN
		---------- begin AccessTokenRequest init ----------
		init(nfInstanceId) := none;
		init(scopeService) := none;
		init(scopeOperation) := none;
		init(targetNFType) := none;
		init(targetNfInstanceId) := none;
		init(targetPlmn) := 0;
		init(requesterNFType) := none;
		init(requesterPlmn) := 0;

	DEFINE
		isATReqValid := 
			nfInstanceId != none
			& scopeService != none
			-- & (targetNfInstanceId = none xor targetNFType = none)
			& (modelParam.atrType = specificProducer -> (
				targetNfInstanceId != none
				& targetNFType = none
				-- & requesterNFType = none -- not required for specificProducer; see below (i.e., can be present if requesterInfoReq)
			))
			& ((modelParam.atrType = specificNFType) -> (
				targetNfInstanceId = none
				& targetNFType != none 
				& requesterNFType != none -- conditional: mandatory for specificNFType; Ambigiously also says, mandatory if operator policy requires
			)) -- for the following two, need to import ModelParam for ATR module
			& targetPlmn != 0 
			& requesterPlmn != 0 
			& targetPlmn != requesterPlmn
			& ((modelParam.requesterInfoReq)-> (
				requesterNFType != none
			))
			;
--
MODULE AccessToken(modelParam)
	VAR
		sub : {none, 1, 2, 3, 4,5};
		aud_NFInstanceId : {none, 1, 2, 3, 4,5};
		aud_NFType : {none, nf_1, nf_2};
		scopeService : {none, service_1, service_2};
		scopeOperation : {none, op_scope_1, op_scope_2};
		exp_ : boolean;
		consumerPlmn: 0..5; -- req for roaming
		producerPlmn: 0..5; -- req for roaming
	ASSIGN
		init(sub) := none;
		init(aud_NFInstanceId) := none;
		init(aud_NFType) := none;
		init(scopeService) := none;
		init(scopeOperation) := none;
		init(exp_) := TRUE;
		init(consumerPlmn) := 0;
		init(producerPlmn) := 0;

	DEFINE
		isTokenValid := 
			sub != none
			& (aud_NFInstanceId = none xor aud_NFType = none)
			& ((modelParam.atrType = specificProducer) -> (aud_NFInstanceId != none))
			& ((modelParam.atrType = specificNFType) -> (aud_NFType != none))
			& consumerPlmn != 0
			& producerPlmn != 0
			& scopeService != none
			& exp_ = FALSE;
--
MODULE ServiceRequest
	VAR
		subjectID : {none, 1, 2, 3, 4,5};
		audienceID : {none, 1, 2, 3, 4,5};
		service : {none, service_1, service_2}; 
		operation : {none, op_1, op_2};
		param1: Param;
	DEFINE
		isServiceRequestValid :=
			subjectID != none
			& audienceID != none
			& service != none
			& operation != none
			;
	
	ASSIGN
		---------- begin ServiceRequest init ----------
		init(subjectID) := none;
		init(audienceID) := none;
		init(service) := none;
		init(operation) := none;
		init(param1.isSensitive) := FALSE;
		init(param1.name) := none;
		init(param1.value) := 0;
--
MODULE ModelParam
	VAR
		atrType: {specificNFType, specificProducer};
		crossProfileCheckRequired: {DR, ATR, ALL}; -- if crossProfile check required for authorization
		requesterInfoReq: boolean; -- models operator policy

		vNRFadvPresent : boolean;
		vNRFadvDiscReq: boolean;
		vNRFadvATReq: boolean;
		vNRFadvProdForward: boolean;
		vNRFadvATForward: boolean; 

	ASSIGN
		next(atrType) := atrType;
		next(crossProfileCheckRequired) := crossProfileCheckRequired;
		next(requesterInfoReq) := requesterInfoReq;
--

MODULE main

	VAR
		--------- NF Configuration variable ----------------
		consumer1: NF;
		consumer2: NF;
		producer1: NF;
		producer2: NF;

		------------------- OAM----------------
		OAMConsumerApprove: boolean;
		OAMProducerApprove: boolean;

		-------------------- Update------------------------
		-- 0: no update; 1: everything; 2: most things 3: only some
		updateLevelConsumer: 0..3;
		updateLevelProducer: 0..3;

		updateDiscoveryRequest: boolean;
		updateATRequest: boolean;
		updateServiceRequest: boolean;

		--------- Adversary Control variable ----------------
		adversaryPresent : boolean;
		adversaryDiscoveryRequest: boolean;
		adversaryATRequest: boolean;
		adversaryServiceRequest: boolean;

		s1: protocol(consumer1,consumer2,producer1,producer2,OAMConsumerApprove,OAMProducerApprove,adversaryPresent,adversaryDiscoveryRequest,adversaryATRequest,adversaryServiceRequest,updateDiscoveryRequest,updateATRequest,updateServiceRequest);
		-- Comment out/uncomment the following line to disable/enable the 2nd consumer. (2nd consumer is not necessary for Finding 1-4.)
		-- s2: protocol(consumer1,consumer2,producer1,producer2,OAMConsumerApprove,OAMProducerApprove,adversaryPresent,adversaryDiscoveryRequest,adversaryATRequest,adversaryServiceRequest,updateDiscoveryRequest,updateATRequest,updateServiceRequest);

	INVAR constraints;
	INVAR 
		consumer1.isNFInstanceValid
		& consumer2.isNFInstanceValid
		& producer1.isNFInstanceValid
		& producer2.isNFInstanceValid;

	/-- Property no_ce: 
		--/
		LTLSPEC NAME no_ce :=
		G(   
			------------OAM control-----------
			!OAMConsumerApprove
			& !OAMProducerApprove
			------------NF update control---------
			& updateLevelConsumer = 0
			& updateLevelProducer = 0
			------------adversary control---------
			& adversaryPresent
			& !adversaryDiscoveryRequest
			& !adversaryATRequest
			& !adversaryServiceRequest
			------------vNRF adversary control---------
			& (!s1.modelParam.vNRFadvPresent)
			& (!s1.modelParam.vNRFadvDiscReq)
			& (!s1.modelParam.vNRFadvATReq)
			& (!s1.modelParam.vNRFadvProdForward)
			& (!s1.modelParam.vNRFadvATForward)
			------------Packet update control---------
			& !updateDiscoveryRequest
			& !updateServiceRequest
			& !updateATRequest
			------------others-----------------
		)
		->
		G(
			((s1.serviceRequest.service = s1.producer.nfService1.serviceName & s1.isServiceReqGranted) ->(
				(( !((s1.producer.nfService1.allowedNFTypes[1] = none) & (s1.producer.nfService1.allowedNFTypes[2] = none)) )-> (
					(
						(s1.consumer.nfType in {s1.producer.nfService1.allowedNFTypes[1], s1.producer.nfService1.allowedNFTypes[2]})
					)
				))
			))
		);
--



	DEFINE
		constraints :=
			isNFServiceNFTypeConsistent
			& isOpNameOpScopeConsistent
			& isOpNameNFServiceNameConsistent
			& isOpNameParamConsistent
			& isOpScopeAuthAttribConsistent
			& isOpParamSensitivityConsistent
		;		
		
		-- nfServiceName - nf type consistency for NF config generation
		isNFServiceNFTypeConsistent :=
			(s1.consumer1.nfService1.serviceName = s1.consumer2.nfService1.serviceName -> s1.consumer1.nfType = s1.consumer2.nfType)
			& (s1.consumer1.nfService1.serviceName = s1.producer1.nfService1.serviceName -> s1.consumer1.nfType = s1.producer1.nfType)
			& (s1.consumer1.nfService1.serviceName = s1.producer2.nfService1.serviceName -> s1.consumer1.nfType = s1.producer2.nfType)
			& (s1.consumer2.nfService1.serviceName = s1.producer1.nfService1.serviceName -> s1.consumer2.nfType = s1.producer1.nfType)
			& (s1.consumer2.nfService1.serviceName = s1.producer2.nfService1.serviceName -> s1.consumer2.nfType = s1.producer2.nfType)
			& (s1.producer1.nfService1.serviceName = s1.producer2.nfService1.serviceName -> s1.producer1.nfType = s1.producer2.nfType)
		;
		-- opName - serviceName consistency for NF config generation
		isOpNameNFServiceNameConsistent :=
			((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.consumer2.nfService1.operation1.opName) 
					-> s1.consumer1.nfService1.serviceName = s1.consumer2.nfService1.serviceName)
			& ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer1.nfService1.operation1.opName) 
					-> s1.consumer1.nfService1.serviceName = s1.producer1.nfService1.serviceName)
			& ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) 
					-> s1.consumer1.nfService1.serviceName = s1.producer2.nfService1.serviceName)

			& ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer1.nfService1.operation1.opName) 
					-> s1.consumer2.nfService1.serviceName = s1.producer1.nfService1.serviceName)
			& ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) 
					-> s1.consumer2.nfService1.serviceName = s1.producer2.nfService1.serviceName)

			& ((s1.producer1.nfService1.operation1.opName != none & s1.producer1.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) 
					-> s1.producer1.nfService1.serviceName = s1.producer2.nfService1.serviceName)
		;
		-- opName - opScope2 consistency for NF config generation
		isOpNameOpScopeConsistent :=
			((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.consumer2.nfService1.operation1.opName) 
					-> s1.consumer1.nfService1.operation1.opScope2 = s1.consumer2.nfService1.operation1.opScope2)
			& ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer1.nfService1.operation1.opName) 
					-> s1.consumer1.nfService1.operation1.opScope2 = s1.producer1.nfService1.operation1.opScope2)
			& ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) 
					-> s1.consumer1.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation1.opScope2)
			
			& ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer1.nfService1.operation1.opName) 
					-> s1.consumer2.nfService1.operation1.opScope2 = s1.producer1.nfService1.operation1.opScope2)
			& ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) 
					-> s1.consumer2.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation1.opScope2)
			
			& ((s1.producer1.nfService1.operation1.opName != none & s1.producer1.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) 
					-> s1.producer1.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation1.opScope2)
		;
		-- opName - Param consistency for NF config generation
		isOpNameParamConsistent := 
			-- c1 <-> c2
			((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.consumer2.nfService1.operation1.opName) -> (
				s1.consumer1.nfService1.operation1.param1.name = s1.consumer2.nfService1.operation1.param1.name
				& s1.consumer1.nfService1.operation1.param1.isSensitive = s1.consumer2.nfService1.operation1.param1.isSensitive
			))
			-- c1 <-> p1
			& ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer1.nfService1.operation1.opName) -> (
				s1.consumer1.nfService1.operation1.param1.name = s1.producer1.nfService1.operation1.param1.name
				& s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
			))
			-- c1 <-> p2
			& ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) -> (
				s1.consumer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation1.param1.name
				& s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
			))
			-- c2 <-> p1
			& ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer1.nfService1.operation1.opName) -> (
				s1.consumer2.nfService1.operation1.param1.name = s1.producer1.nfService1.operation1.param1.name
				& s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
			))
			-- c2 <-> p2
			& ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) -> (
				s1.consumer2.nfService1.operation1.param1.name = s1.producer2.nfService1.operation1.param1.name
				& s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
			))
			-- p1 <-> p2
			& ((s1.producer1.nfService1.operation1.opName != none & s1.producer1.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) -> (
				s1.producer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation1.param1.name
				& s1.producer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
			))
		;
		-- opScope – allowedNFTypes and allowedNFInstances consistency
		isOpScopeAuthAttribConsistent:= 
			-- c1 <-> c2
			((s1.consumer1.nfService1.operation1.opScope2 != none & s1.consumer1.nfService1.operation1.opScope2 = s1.consumer2.nfService1.operation1.opScope2) -> (
				s1.consumer1.nfService1.operation1.allowedNFInstances[1] = s1.consumer2.nfService1.operation1.allowedNFInstances[1]
				& s1.consumer1.nfService1.operation1.allowedNFInstances[2] = s1.consumer2.nfService1.operation1.allowedNFInstances[2]
				& s1.consumer1.nfService1.operation1.allowedNFTypes[1] = s1.consumer2.nfService1.operation1.allowedNFTypes[1]
				& s1.consumer1.nfService1.operation1.allowedNFTypes[2] = s1.consumer2.nfService1.operation1.allowedNFTypes[2]
			))
			-- c1 <-> p1
			& ((s1.consumer1.nfService1.operation1.opScope2 != none & s1.consumer1.nfService1.operation1.opScope2 = s1.producer1.nfService1.operation1.opScope2) -> (
				s1.consumer1.nfService1.operation1.allowedNFInstances[1] = s1.producer1.nfService1.operation1.allowedNFInstances[1]
				& s1.consumer1.nfService1.operation1.allowedNFInstances[2] = s1.producer1.nfService1.operation1.allowedNFInstances[2]
				& s1.consumer1.nfService1.operation1.allowedNFTypes[1] = s1.producer1.nfService1.operation1.allowedNFTypes[1]
				& s1.consumer1.nfService1.operation1.allowedNFTypes[2] = s1.producer1.nfService1.operation1.allowedNFTypes[2]
			))
			-- c1 <-> p2
			& ((s1.consumer1.nfService1.operation1.opScope2 != none & s1.consumer1.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation1.opScope2) -> (
				s1.consumer1.nfService1.operation1.allowedNFInstances[1] = s1.producer2.nfService1.operation1.allowedNFInstances[1]
				& s1.consumer1.nfService1.operation1.allowedNFInstances[2] = s1.producer2.nfService1.operation1.allowedNFInstances[2]
				& s1.consumer1.nfService1.operation1.allowedNFTypes[1] = s1.producer2.nfService1.operation1.allowedNFTypes[1]
				& s1.consumer1.nfService1.operation1.allowedNFTypes[2] = s1.producer2.nfService1.operation1.allowedNFTypes[2]
			))
			-- c2 <-> p1
			& ((s1.consumer2.nfService1.operation1.opScope2 != none & s1.consumer2.nfService1.operation1.opScope2 = s1.producer1.nfService1.operation1.opScope2) -> (
				s1.consumer2.nfService1.operation1.allowedNFInstances[1] = s1.producer1.nfService1.operation1.allowedNFInstances[1]
				& s1.consumer2.nfService1.operation1.allowedNFInstances[2] = s1.producer1.nfService1.operation1.allowedNFInstances[2]
				& s1.consumer2.nfService1.operation1.allowedNFTypes[1] = s1.producer1.nfService1.operation1.allowedNFTypes[1]
				& s1.consumer2.nfService1.operation1.allowedNFTypes[2] = s1.producer1.nfService1.operation1.allowedNFTypes[2]
			))
			-- c2 <-> p2
			& ((s1.consumer2.nfService1.operation1.opScope2 != none & s1.consumer2.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation1.opScope2) -> (
				s1.consumer2.nfService1.operation1.allowedNFInstances[1] = s1.producer2.nfService1.operation1.allowedNFInstances[1]
				& s1.consumer2.nfService1.operation1.allowedNFInstances[2] = s1.producer2.nfService1.operation1.allowedNFInstances[2]
				& s1.consumer2.nfService1.operation1.allowedNFTypes[1] = s1.producer2.nfService1.operation1.allowedNFTypes[1]
				& s1.consumer2.nfService1.operation1.allowedNFTypes[2] = s1.producer2.nfService1.operation1.allowedNFTypes[2]
			))
			-- p1 <-> p2
			& ((s1.producer1.nfService1.operation1.opScope2 != none & s1.producer1.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation1.opScope2) -> (
				s1.producer1.nfService1.operation1.allowedNFInstances[1] = s1.producer2.nfService1.operation1.allowedNFInstances[1]
				& s1.producer1.nfService1.operation1.allowedNFInstances[2] = s1.producer2.nfService1.operation1.allowedNFInstances[2]
				& s1.producer1.nfService1.operation1.allowedNFTypes[1] = s1.producer2.nfService1.operation1.allowedNFTypes[1]
				& s1.producer1.nfService1.operation1.allowedNFTypes[2] = s1.producer2.nfService1.operation1.allowedNFTypes[2]
			))
		;
		-- Param-sensitivity consistency for NF config generation
		isOpParamSensitivityConsistent := 
			-- c1 <-> c2
			((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.consumer2.nfService1.operation1.param1.name) -> (
				s1.consumer1.nfService1.operation1.param1.isSensitive = s1.consumer2.nfService1.operation1.param1.isSensitive
			))
			-- c1 <-> p1
			& ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.producer1.nfService1.operation1.param1.name) -> (
				s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
			))
			-- c1 <-> p2
			& ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation1.param1.name) -> (
				s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
			))
			-- c2 <-> p1
			& ((s1.consumer2.nfService1.operation1.param1.name != none & s1.consumer2.nfService1.operation1.param1.name = s1.producer1.nfService1.operation1.param1.name) -> (
				s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
			))
			-- c2 <-> p2
			& ((s1.consumer2.nfService1.operation1.param1.name != none & s1.consumer2.nfService1.operation1.param1.name = s1.producer2.nfService1.operation1.param1.name) -> (
				s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
			))
			-- p1 <-> p2
			& ((s1.producer1.nfService1.operation1.param1.name != none & s1.producer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation1.param1.name) -> (
				s1.producer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
			))
		;

	ASSIGN
		--------- environment variables ----------------
		init(consumer1.model_id) := 1;
		init(consumer1.nfInstanceId) := 1;

		init(consumer2.model_id) := 2;
		init(consumer2.nfInstanceId) := 2;
	
		init(producer1.model_id) := 3;
		init(producer1.nfInstanceId) := 3;

		init(producer2.model_id) := 4;
		init(producer2.nfInstanceId) := 4;

		next(consumer1.model_id) := consumer1.model_id;
		next(consumer1.nfInstanceId) := case
			(!OAMConsumerApprove) : consumer1.nfInstanceId;
			(adversaryPresent & updateLevelConsumer = 1) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelConsumer = 2) : consumer1.nfInstanceId;
			(adversaryPresent & updateLevelConsumer = 3) : consumer1.nfInstanceId;
			TRUE: consumer1.nfInstanceId;
		esac;
		next(consumer1.nfType) := case
			(!OAMConsumerApprove) : consumer1.nfType;
			(adversaryPresent & updateLevelConsumer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 2) : consumer1.nfType;
			(adversaryPresent & updateLevelConsumer = 3) : consumer1.nfType;
			TRUE: consumer1.nfType;
		esac;
		next(consumer1.plmns[1]) := case
			(!OAMConsumerApprove) : consumer1.plmns[1];
			(adversaryPresent & updateLevelConsumer = 1) : 0..5;
			(adversaryPresent & updateLevelConsumer = 2) : 0..5;
			(adversaryPresent & updateLevelConsumer = 3) : consumer1.plmns[1];
			TRUE: consumer1.plmns[1];
		esac;
		next(consumer1.plmns[2]) := case
			(!OAMConsumerApprove) : consumer1.plmns[2];
			(adversaryPresent & updateLevelConsumer = 1) : 0..5;
			(adversaryPresent & updateLevelConsumer = 2) : 0..5;
			(adversaryPresent & updateLevelConsumer = 3) : consumer1.plmns[2];
			TRUE: consumer1.plmns[2];
		esac;
		next(consumer1.allowedNFTypes[1]) := case
			(!OAMConsumerApprove) : consumer1.allowedNFTypes[1];
			(adversaryPresent & updateLevelConsumer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 3) : {none, nf_1, nf_2};
			TRUE: consumer1.allowedNFTypes[1];
		esac;
		next(consumer1.allowedNFTypes[2]) := case
			(!OAMConsumerApprove) : consumer1.allowedNFTypes[2];
			(adversaryPresent & updateLevelConsumer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 3) : {none, nf_1, nf_2};
			TRUE: consumer1.allowedNFTypes[2];
		esac;
		next(consumer1.allowedPlmns[1]) := case
			(!OAMConsumerApprove) : consumer1.allowedPlmns[1];
			(adversaryPresent & updateLevelConsumer = 1) : 0..5;
			(adversaryPresent & updateLevelConsumer = 2) : 0..5;
			(adversaryPresent & updateLevelConsumer = 3) : 0..5;
			TRUE: consumer1.allowedPlmns[1];
		esac;
		next(consumer1.allowedPlmns[2]) := case
			(!OAMConsumerApprove) : consumer1.allowedPlmns[2];
			(adversaryPresent & updateLevelConsumer = 1) : 0..5;
			(adversaryPresent & updateLevelConsumer = 2) : 0..5;
			(adversaryPresent & updateLevelConsumer = 3) : 0..5;
			TRUE: consumer1.allowedPlmns[2];
		esac;
		next(consumer1.nfService1.allowedNFTypes[1]) := case
			(!OAMConsumerApprove) : consumer1.nfService1.allowedNFTypes[1];
			(adversaryPresent & updateLevelConsumer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 3) : {none, nf_1, nf_2};
			TRUE: consumer1.nfService1.allowedNFTypes[1];
		esac;
		next(consumer1.nfService1.allowedNFTypes[2]) := case
			(!OAMConsumerApprove) : consumer1.nfService1.allowedNFTypes[2];
			(adversaryPresent & updateLevelConsumer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 3) : {none, nf_1, nf_2};
			TRUE: consumer1.nfService1.allowedNFTypes[2];
		esac;
		next(consumer1.nfService1.serviceName) := case
			(!OAMConsumerApprove) : consumer1.nfService1.serviceName;
			(adversaryPresent & updateLevelConsumer = 1) : {none, service_1, service_2};
			(adversaryPresent & updateLevelConsumer = 2) : consumer1.nfService1.serviceName;
			(adversaryPresent & updateLevelConsumer = 3) : consumer1.nfService1.serviceName;
			TRUE: consumer1.nfService1.serviceName;
		esac;
		next(consumer1.nfService1.allowedPlmns[1]) := case
			(!OAMConsumerApprove) : consumer1.nfService1.allowedPlmns[1];
			(adversaryPresent & updateLevelConsumer = 1) : 0..5;
			(adversaryPresent & updateLevelConsumer = 2) : 0..5;
			(adversaryPresent & updateLevelConsumer = 3) : 0..5;
			TRUE: consumer1.nfService1.allowedPlmns[1];
		esac;
		next(consumer1.nfService1.allowedPlmns[2]) := case
			(!OAMConsumerApprove) : consumer1.nfService1.allowedPlmns[2];
			(adversaryPresent & updateLevelConsumer = 1) : 0..5;
			(adversaryPresent & updateLevelConsumer = 2) : 0..5;
			(adversaryPresent & updateLevelConsumer = 3) : 0..5;
			TRUE: consumer1.nfService1.allowedPlmns[2];
		esac;
		next(consumer1.nfService1.operation1.allowedNFInstances[1]) := case
			(!OAMConsumerApprove) : consumer1.nfService1.operation1.allowedNFInstances[1];
			(adversaryPresent & updateLevelConsumer = 1) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelConsumer = 2) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelConsumer = 3) : {none, 1, 2, 3, 4,5};
			TRUE: consumer1.nfService1.operation1.allowedNFInstances[1];
		esac;
		next(consumer1.nfService1.operation1.allowedNFInstances[2]) := case
			(!OAMConsumerApprove) : consumer1.nfService1.operation1.allowedNFInstances[2];
			(adversaryPresent & updateLevelConsumer = 1) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelConsumer = 2) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelConsumer = 3) : {none, 1, 2, 3, 4,5};
			TRUE: consumer1.nfService1.operation1.allowedNFInstances[2];
		esac;
		next(consumer1.nfService1.operation1.allowedNFTypes[1]) := case
			(!OAMConsumerApprove) : consumer1.nfService1.operation1.allowedNFTypes[1];
			(adversaryPresent & updateLevelConsumer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 3) : {none, nf_1, nf_2};
			TRUE: consumer1.nfService1.operation1.allowedNFTypes[1];
		esac;
		next(consumer1.nfService1.operation1.allowedNFTypes[2]) := case
			(!OAMConsumerApprove) : consumer1.nfService1.operation1.allowedNFTypes[2];
			(adversaryPresent & updateLevelConsumer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 3) : {none, nf_1, nf_2};
			TRUE: consumer1.nfService1.operation1.allowedNFTypes[2];
		esac;
		next(consumer1.nfService1.operation1.opName) := case
			(!OAMConsumerApprove) : consumer1.nfService1.operation1.opName;
			(adversaryPresent & updateLevelConsumer = 1) : {none, op_1, op_2};
			(adversaryPresent & updateLevelConsumer = 2) : consumer1.nfService1.operation1.opName;
			(adversaryPresent & updateLevelConsumer = 3) : consumer1.nfService1.operation1.opName;
			TRUE: consumer1.nfService1.operation1.opName;
		esac;
		next(consumer1.nfService1.operation1.opScope1) := case
			(!OAMConsumerApprove) : consumer1.nfService1.operation1.opScope1;
			(adversaryPresent & updateLevelConsumer = 1) : {none, service_1, service_2};
			(adversaryPresent & updateLevelConsumer = 2) : consumer1.nfService1.operation1.opScope1;
			(adversaryPresent & updateLevelConsumer = 3) : consumer1.nfService1.operation1.opScope1;
			TRUE: consumer1.nfService1.operation1.opScope1;
		esac;
		next(consumer1.nfService1.operation1.opScope2) := case
			(!OAMConsumerApprove) : consumer1.nfService1.operation1.opScope2;
			(adversaryPresent & updateLevelConsumer = 1) : {none, op_scope_1, op_scope_2};
			(adversaryPresent & updateLevelConsumer = 2) : consumer1.nfService1.operation1.opScope2;
			(adversaryPresent & updateLevelConsumer = 3) : consumer1.nfService1.operation1.opScope2;
			TRUE: consumer1.nfService1.operation1.opScope2;
		esac;
		next(consumer1.nfService1.operation1.param1.isSensitive) := case
			(!OAMConsumerApprove) : consumer1.nfService1.operation1.param1.isSensitive;
			(adversaryPresent & updateLevelConsumer = 1) : {TRUE, FALSE};
			(adversaryPresent & updateLevelConsumer = 2) : consumer1.nfService1.operation1.param1.isSensitive;
			(adversaryPresent & updateLevelConsumer = 3) : consumer1.nfService1.operation1.param1.isSensitive;
			TRUE: consumer1.nfService1.operation1.param1.isSensitive;
		esac;
		next(consumer1.nfService1.operation1.param1.name) := case
			(!OAMConsumerApprove) : consumer1.nfService1.operation1.param1.name;
			(adversaryPresent & updateLevelConsumer = 1) : {none, p1, p2, p3, p4};
			(adversaryPresent & updateLevelConsumer = 2) : consumer1.nfService1.operation1.param1.name;
			(adversaryPresent & updateLevelConsumer = 3) : consumer1.nfService1.operation1.param1.name;
			TRUE: consumer1.nfService1.operation1.param1.name;
		esac;
		next(consumer1.nfService1.operation1.param1.value) := case
			(!OAMConsumerApprove) : consumer1.nfService1.operation1.param1.value;
			(adversaryPresent & updateLevelConsumer = 1) : 0..2;
			(adversaryPresent & updateLevelConsumer = 2) : consumer1.nfService1.operation1.param1.value;
			(adversaryPresent & updateLevelConsumer = 3) : consumer1.nfService1.operation1.param1.value;
			TRUE: consumer1.nfService1.operation1.param1.value;
		esac;

		next(consumer2.model_id) := consumer2.model_id;
		next(consumer2.nfInstanceId) := case
			(!OAMConsumerApprove) : consumer2.nfInstanceId;
			(adversaryPresent & updateLevelConsumer = 1) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelConsumer = 2) : consumer2.nfInstanceId;
			(adversaryPresent & updateLevelConsumer = 3) : consumer2.nfInstanceId;
			TRUE: consumer2.nfInstanceId;
		esac;
		next(consumer2.nfType) := case
			(!OAMConsumerApprove) : consumer2.nfType;
			(adversaryPresent & updateLevelConsumer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 2) : consumer2.nfType;
			(adversaryPresent & updateLevelConsumer = 3) : consumer2.nfType;
			TRUE: consumer2.nfType;
		esac;
		next(consumer2.plmns[1]) := case
			(!OAMConsumerApprove) : consumer2.plmns[1];
			(adversaryPresent & updateLevelConsumer = 1) : 0..5;
			(adversaryPresent & updateLevelConsumer = 2) : 0..5;
			(adversaryPresent & updateLevelConsumer = 3) : consumer2.plmns[1];
			TRUE: consumer2.plmns[1];
		esac;
		next(consumer2.plmns[2]) := case
			(!OAMConsumerApprove) : consumer2.plmns[2];
			(adversaryPresent & updateLevelConsumer = 1) : 0..5;
			(adversaryPresent & updateLevelConsumer = 2) : 0..5;
			(adversaryPresent & updateLevelConsumer = 3) : consumer2.plmns[2];
			TRUE: consumer2.plmns[2];
		esac;
		next(consumer2.allowedNFTypes[1]) := case
			(!OAMConsumerApprove) : consumer2.allowedNFTypes[1];
			(adversaryPresent & updateLevelConsumer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 3) : {none, nf_1, nf_2};
			TRUE: consumer2.allowedNFTypes[1];
		esac;
		next(consumer2.allowedNFTypes[2]) := case
			(!OAMConsumerApprove) : consumer2.allowedNFTypes[2];
			(adversaryPresent & updateLevelConsumer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 3) : {none, nf_1, nf_2};
			TRUE: consumer2.allowedNFTypes[2];
		esac;
		next(consumer2.allowedPlmns[1]) := case
			(!OAMConsumerApprove) : consumer2.allowedPlmns[1];
			(adversaryPresent & updateLevelConsumer = 1) : 0..5;
			(adversaryPresent & updateLevelConsumer = 2) : 0..5;
			(adversaryPresent & updateLevelConsumer = 3) : 0..5;
			TRUE: consumer2.allowedPlmns[1];
		esac;
		next(consumer2.allowedPlmns[2]) := case
			(!OAMConsumerApprove) : consumer2.allowedPlmns[2];
			(adversaryPresent & updateLevelConsumer = 1) : 0..5;
			(adversaryPresent & updateLevelConsumer = 2) : 0..5;
			(adversaryPresent & updateLevelConsumer = 3) : 0..5;
			TRUE: consumer2.allowedPlmns[2];
		esac;
		next(consumer2.nfService1.allowedNFTypes[1]) := case
			(!OAMConsumerApprove) : consumer2.nfService1.allowedNFTypes[1];
			(adversaryPresent & updateLevelConsumer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 3) : {none, nf_1, nf_2};
			TRUE: consumer2.nfService1.allowedNFTypes[1];
		esac;
		next(consumer2.nfService1.allowedNFTypes[2]) := case
			(!OAMConsumerApprove) : consumer2.nfService1.allowedNFTypes[2];
			(adversaryPresent & updateLevelConsumer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 3) : {none, nf_1, nf_2};
			TRUE: consumer2.nfService1.allowedNFTypes[2];
		esac;
		next(consumer2.nfService1.serviceName) := case
			(!OAMConsumerApprove) : consumer2.nfService1.serviceName;
			(adversaryPresent & updateLevelConsumer = 1) : {none, service_1, service_2};
			(adversaryPresent & updateLevelConsumer = 2) : consumer2.nfService1.serviceName;
			(adversaryPresent & updateLevelConsumer = 3) : consumer2.nfService1.serviceName;
			TRUE: consumer2.nfService1.serviceName;
		esac;
		next(consumer2.nfService1.allowedPlmns[1]) := case
			(!OAMConsumerApprove) : consumer2.nfService1.allowedPlmns[1];
			(adversaryPresent & updateLevelConsumer = 1) : 0..5;
			(adversaryPresent & updateLevelConsumer = 2) : 0..5;
			(adversaryPresent & updateLevelConsumer = 3) : 0..5;
			TRUE: consumer2.nfService1.allowedPlmns[1];
		esac;
		next(consumer2.nfService1.allowedPlmns[2]) := case
			(!OAMConsumerApprove) : consumer2.nfService1.allowedPlmns[2];
			(adversaryPresent & updateLevelConsumer = 1) : 0..5;
			(adversaryPresent & updateLevelConsumer = 2) : 0..5;
			(adversaryPresent & updateLevelConsumer = 3) : 0..5;
			TRUE: consumer2.nfService1.allowedPlmns[2];
		esac;
		next(consumer2.nfService1.operation1.allowedNFInstances[1]) := case
			(!OAMConsumerApprove) : consumer2.nfService1.operation1.allowedNFInstances[1];
			(adversaryPresent & updateLevelConsumer = 1) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelConsumer = 2) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelConsumer = 3) : {none, 1, 2, 3, 4,5};
			TRUE: consumer2.nfService1.operation1.allowedNFInstances[1];
		esac;
		next(consumer2.nfService1.operation1.allowedNFInstances[2]) := case
			(!OAMConsumerApprove) : consumer2.nfService1.operation1.allowedNFInstances[2];
			(adversaryPresent & updateLevelConsumer = 1) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelConsumer = 2) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelConsumer = 3) : {none, 1, 2, 3, 4,5};
			TRUE: consumer2.nfService1.operation1.allowedNFInstances[2];
		esac;
		next(consumer2.nfService1.operation1.allowedNFTypes[1]) := case
			(!OAMConsumerApprove) : consumer2.nfService1.operation1.allowedNFTypes[1];
			(adversaryPresent & updateLevelConsumer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 3) : {none, nf_1, nf_2};
			TRUE: consumer2.nfService1.operation1.allowedNFTypes[1];
		esac;
		next(consumer2.nfService1.operation1.allowedNFTypes[2]) := case
			(!OAMConsumerApprove) : consumer2.nfService1.operation1.allowedNFTypes[2];
			(adversaryPresent & updateLevelConsumer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelConsumer = 3) : {none, nf_1, nf_2};
			TRUE: consumer2.nfService1.operation1.allowedNFTypes[2];
		esac;
		next(consumer2.nfService1.operation1.opName) := case
			(!OAMConsumerApprove) : consumer2.nfService1.operation1.opName;
			(adversaryPresent & updateLevelConsumer = 1) : {none, op_1, op_2};
			(adversaryPresent & updateLevelConsumer = 2) : consumer2.nfService1.operation1.opName;
			(adversaryPresent & updateLevelConsumer = 3) : consumer2.nfService1.operation1.opName;
			TRUE: consumer2.nfService1.operation1.opName;
		esac;
		next(consumer2.nfService1.operation1.opScope1) := case
			(!OAMConsumerApprove) : consumer2.nfService1.operation1.opScope1;
			(adversaryPresent & updateLevelConsumer = 1) : {none, service_1, service_2};
			(adversaryPresent & updateLevelConsumer = 2) : consumer2.nfService1.operation1.opScope1;
			(adversaryPresent & updateLevelConsumer = 3) : consumer2.nfService1.operation1.opScope1;
			TRUE: consumer2.nfService1.operation1.opScope1;
		esac;
		next(consumer2.nfService1.operation1.opScope2) := case
			(!OAMConsumerApprove) : consumer2.nfService1.operation1.opScope2;
			(adversaryPresent & updateLevelConsumer = 1) : {none, op_scope_1, op_scope_2};
			(adversaryPresent & updateLevelConsumer = 2) : consumer2.nfService1.operation1.opScope2;
			(adversaryPresent & updateLevelConsumer = 3) : consumer2.nfService1.operation1.opScope2;
			TRUE: consumer2.nfService1.operation1.opScope2;
		esac;
		next(consumer2.nfService1.operation1.param1.isSensitive) := case
			(!OAMConsumerApprove) : consumer2.nfService1.operation1.param1.isSensitive;
			(adversaryPresent & updateLevelConsumer = 1) : {TRUE, FALSE};
			(adversaryPresent & updateLevelConsumer = 2) : consumer2.nfService1.operation1.param1.isSensitive;
			(adversaryPresent & updateLevelConsumer = 3) : consumer2.nfService1.operation1.param1.isSensitive;
			TRUE: consumer2.nfService1.operation1.param1.isSensitive;
		esac;
		next(consumer2.nfService1.operation1.param1.name) := case
			(!OAMConsumerApprove) : consumer2.nfService1.operation1.param1.name;
			(adversaryPresent & updateLevelConsumer = 1) : {none, p1, p2, p3, p4};
			(adversaryPresent & updateLevelConsumer = 2) : consumer2.nfService1.operation1.param1.name;
			(adversaryPresent & updateLevelConsumer = 3) : consumer2.nfService1.operation1.param1.name;
			TRUE: consumer2.nfService1.operation1.param1.name;
		esac;
		next(consumer2.nfService1.operation1.param1.value) := case
			(!OAMConsumerApprove) : consumer2.nfService1.operation1.param1.value;
			(adversaryPresent & updateLevelConsumer = 1) : 0..2;
			(adversaryPresent & updateLevelConsumer = 2) : consumer2.nfService1.operation1.param1.value;
			(adversaryPresent & updateLevelConsumer = 3) : consumer2.nfService1.operation1.param1.value;
			TRUE: consumer2.nfService1.operation1.param1.value;
		esac;

		next(producer1.model_id) := producer1.model_id;
		next(producer1.nfInstanceId) := case
			(!OAMProducerApprove) : producer1.nfInstanceId;
			(adversaryPresent & updateLevelProducer = 1) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelProducer = 2) : producer1.nfInstanceId;
			(adversaryPresent & updateLevelProducer = 3) : producer1.nfInstanceId;
			TRUE: producer1.nfInstanceId;
		esac;
		next(producer1.nfType) := case
			(!OAMProducerApprove) : producer1.nfType;
			(adversaryPresent & updateLevelProducer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 2) : producer1.nfType;
			(adversaryPresent & updateLevelProducer = 3) : producer1.nfType;
			TRUE: producer1.nfType;
		esac;
		next(producer1.plmns[1]) := case
			(!OAMProducerApprove) : producer1.plmns[1];
			(adversaryPresent & updateLevelProducer = 1) : 0..5;
			(adversaryPresent & updateLevelProducer = 2) : 0..5;
			(adversaryPresent & updateLevelProducer = 3) : producer1.plmns[1];
			TRUE: producer1.plmns[1];
		esac;
		next(producer1.plmns[2]) := case
			(!OAMProducerApprove) : producer1.plmns[2];
			(adversaryPresent & updateLevelProducer = 1) : 0..5;
			(adversaryPresent & updateLevelProducer = 2) : 0..5;
			(adversaryPresent & updateLevelProducer = 3) : producer1.plmns[2];
			TRUE: producer1.plmns[2];
		esac;
		next(producer1.allowedNFTypes[1]) := case
			(!OAMProducerApprove) : producer1.allowedNFTypes[1];
			(adversaryPresent & updateLevelProducer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 3) : {none, nf_1, nf_2};
			TRUE: producer1.allowedNFTypes[1];
		esac;
		next(producer1.allowedNFTypes[2]) := case
			(!OAMProducerApprove) : producer1.allowedNFTypes[2];
			(adversaryPresent & updateLevelProducer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 3) : {none, nf_1, nf_2};
			TRUE: producer1.allowedNFTypes[2];
		esac;
		next(producer1.allowedPlmns[1]) := case
			(!OAMProducerApprove) : producer1.allowedPlmns[1];
			(adversaryPresent & updateLevelProducer = 1) : 0..5;
			(adversaryPresent & updateLevelProducer = 2) : 0..5;
			(adversaryPresent & updateLevelProducer = 3) : 0..5;
			TRUE: producer1.allowedPlmns[1];
		esac;
		next(producer1.allowedPlmns[2]) := case
			(!OAMProducerApprove) : producer1.allowedPlmns[2];
			(adversaryPresent & updateLevelProducer = 1) : 0..5;
			(adversaryPresent & updateLevelProducer = 2) : 0..5;
			(adversaryPresent & updateLevelProducer = 3) : 0..5;
			TRUE: producer1.allowedPlmns[2];
		esac;
		next(producer1.nfService1.allowedNFTypes[1]) := case
			(!OAMProducerApprove) : producer1.nfService1.allowedNFTypes[1];
			(adversaryPresent & updateLevelProducer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 3) : {none, nf_1, nf_2};
			TRUE: producer1.nfService1.allowedNFTypes[1];
		esac;
		next(producer1.nfService1.allowedNFTypes[2]) := case
			(!OAMProducerApprove) : producer1.nfService1.allowedNFTypes[2];
			(adversaryPresent & updateLevelProducer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 3) : {none, nf_1, nf_2};
			TRUE: producer1.nfService1.allowedNFTypes[2];
		esac;
		next(producer1.nfService1.serviceName) := case
			(!OAMProducerApprove) : producer1.nfService1.serviceName;
			(adversaryPresent & updateLevelProducer = 1) : {none, service_1, service_2};
			(adversaryPresent & updateLevelProducer = 2) : producer1.nfService1.serviceName;
			(adversaryPresent & updateLevelProducer = 3) : producer1.nfService1.serviceName;
			TRUE: producer1.nfService1.serviceName;
		esac;
		next(producer1.nfService1.allowedPlmns[1]) := case
			(!OAMProducerApprove) : producer1.nfService1.allowedPlmns[1];
			(adversaryPresent & updateLevelProducer = 1) : 0..5;
			(adversaryPresent & updateLevelProducer = 2) : 0..5;
			(adversaryPresent & updateLevelProducer = 3) : 0..5;
			TRUE: producer1.nfService1.allowedPlmns[1];
		esac;
		next(producer1.nfService1.allowedPlmns[2]) := case
			(!OAMProducerApprove) : producer1.nfService1.allowedPlmns[2];
			(adversaryPresent & updateLevelProducer = 1) : 0..5;
			(adversaryPresent & updateLevelProducer = 2) : 0..5;
			(adversaryPresent & updateLevelProducer = 3) : 0..5;
			TRUE: producer1.nfService1.allowedPlmns[2];
		esac;
		next(producer1.nfService1.operation1.allowedNFInstances[1]) := case
			(!OAMProducerApprove) : producer1.nfService1.operation1.allowedNFInstances[1];
			(adversaryPresent & updateLevelProducer = 1) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelProducer = 2) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelProducer = 3) : {none, 1, 2, 3, 4,5};
			TRUE: producer1.nfService1.operation1.allowedNFInstances[1];
		esac;
		next(producer1.nfService1.operation1.allowedNFInstances[2]) := case
			(!OAMProducerApprove) : producer1.nfService1.operation1.allowedNFInstances[2];
			(adversaryPresent & updateLevelProducer = 1) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelProducer = 2) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelProducer = 3) : {none, 1, 2, 3, 4,5};
			TRUE: producer1.nfService1.operation1.allowedNFInstances[2];
		esac;
		next(producer1.nfService1.operation1.allowedNFTypes[1]) := case
			(!OAMProducerApprove) : producer1.nfService1.operation1.allowedNFTypes[1];
			(adversaryPresent & updateLevelProducer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 3) : {none, nf_1, nf_2};
			TRUE: producer1.nfService1.operation1.allowedNFTypes[1];
		esac;
		next(producer1.nfService1.operation1.allowedNFTypes[2]) := case
			(!OAMProducerApprove) : producer1.nfService1.operation1.allowedNFTypes[2];
			(adversaryPresent & updateLevelProducer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 3) : {none, nf_1, nf_2};
			TRUE: producer1.nfService1.operation1.allowedNFTypes[2];
		esac;
		next(producer1.nfService1.operation1.opName) := case
			(!OAMProducerApprove) : producer1.nfService1.operation1.opName;
			(adversaryPresent & updateLevelProducer = 1) : {none, op_1, op_2};
			(adversaryPresent & updateLevelProducer = 2) : producer1.nfService1.operation1.opName;
			(adversaryPresent & updateLevelProducer = 3) : producer1.nfService1.operation1.opName;
			TRUE: producer1.nfService1.operation1.opName;
		esac;
		next(producer1.nfService1.operation1.opScope1) := case
			(!OAMProducerApprove) : producer1.nfService1.operation1.opScope1;
			(adversaryPresent & updateLevelProducer = 1) : {none, service_1, service_2};
			(adversaryPresent & updateLevelProducer = 2) : producer1.nfService1.operation1.opScope1;
			(adversaryPresent & updateLevelProducer = 3) : producer1.nfService1.operation1.opScope1;
			TRUE: producer1.nfService1.operation1.opScope1;
		esac;
		next(producer1.nfService1.operation1.opScope2) := case
			(!OAMProducerApprove) : producer1.nfService1.operation1.opScope2;
			(adversaryPresent & updateLevelProducer = 1) : {none, op_scope_1, op_scope_2};
			(adversaryPresent & updateLevelProducer = 2) : producer1.nfService1.operation1.opScope2;
			(adversaryPresent & updateLevelProducer = 3) : producer1.nfService1.operation1.opScope2;
			TRUE: producer1.nfService1.operation1.opScope2;
		esac;
		next(producer1.nfService1.operation1.param1.isSensitive) := case
			(!OAMProducerApprove) : producer1.nfService1.operation1.param1.isSensitive;
			(adversaryPresent & updateLevelProducer = 1) : {TRUE, FALSE};
			(adversaryPresent & updateLevelProducer = 2) : producer1.nfService1.operation1.param1.isSensitive;
			(adversaryPresent & updateLevelProducer = 3) : producer1.nfService1.operation1.param1.isSensitive;
			TRUE: producer1.nfService1.operation1.param1.isSensitive;
		esac;
		next(producer1.nfService1.operation1.param1.name) := case
			(!OAMProducerApprove) : producer1.nfService1.operation1.param1.name;
			(adversaryPresent & updateLevelProducer = 1) : {none, p1, p2, p3, p4};
			(adversaryPresent & updateLevelProducer = 2) : producer1.nfService1.operation1.param1.name;
			(adversaryPresent & updateLevelProducer = 3) : producer1.nfService1.operation1.param1.name;
			TRUE: producer1.nfService1.operation1.param1.name;
		esac;
		next(producer1.nfService1.operation1.param1.value) := case
			(!OAMProducerApprove) : producer1.nfService1.operation1.param1.value;
			(adversaryPresent & updateLevelProducer = 1) : 0..2;
			(adversaryPresent & updateLevelProducer = 2) : producer1.nfService1.operation1.param1.value;
			(adversaryPresent & updateLevelProducer = 3) : producer1.nfService1.operation1.param1.value;
			TRUE: producer1.nfService1.operation1.param1.value;
		esac;

		next(producer2.model_id) := producer2.model_id;
		next(producer2.nfInstanceId) := case
			(!OAMProducerApprove) : producer2.nfInstanceId;
			(adversaryPresent & updateLevelProducer = 1) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelProducer = 2) : producer2.nfInstanceId;
			(adversaryPresent & updateLevelProducer = 3) : producer2.nfInstanceId;
			TRUE: producer2.nfInstanceId;
		esac;
		next(producer2.nfType) := case
			(!OAMProducerApprove) : producer2.nfType;
			(adversaryPresent & updateLevelProducer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 2) : producer2.nfType;
			(adversaryPresent & updateLevelProducer = 3) : producer2.nfType;
			TRUE: producer2.nfType;
		esac;
		next(producer2.plmns[1]) := case
			(!OAMProducerApprove) : producer2.plmns[1];
			(adversaryPresent & updateLevelProducer = 1) : 0..5;
			(adversaryPresent & updateLevelProducer = 2) : 0..5;
			(adversaryPresent & updateLevelProducer = 3) : producer2.plmns[1];
			TRUE: producer2.plmns[1];
		esac;
		next(producer2.plmns[2]) := case
			(!OAMProducerApprove) : producer2.plmns[2];
			(adversaryPresent & updateLevelProducer = 1) : 0..5;
			(adversaryPresent & updateLevelProducer = 2) : 0..5;
			(adversaryPresent & updateLevelProducer = 3) : producer2.plmns[2];
			TRUE: producer2.plmns[2];
		esac;
		next(producer2.allowedNFTypes[1]) := case
			(!OAMProducerApprove) : producer2.allowedNFTypes[1];
			(adversaryPresent & updateLevelProducer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 3) : {none, nf_1, nf_2};
			TRUE: producer2.allowedNFTypes[1];
		esac;
		next(producer2.allowedNFTypes[2]) := case
			(!OAMProducerApprove) : producer2.allowedNFTypes[2];
			(adversaryPresent & updateLevelProducer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 3) : {none, nf_1, nf_2};
			TRUE: producer2.allowedNFTypes[2];
		esac;
		next(producer2.allowedPlmns[1]) := case
			(!OAMProducerApprove) : producer2.allowedPlmns[1];
			(adversaryPresent & updateLevelProducer = 1) : 0..5;
			(adversaryPresent & updateLevelProducer = 2) : 0..5;
			(adversaryPresent & updateLevelProducer = 3) : 0..5;
			TRUE: producer2.allowedPlmns[1];
		esac;
		next(producer2.allowedPlmns[2]) := case
			(!OAMProducerApprove) : producer2.allowedPlmns[2];
			(adversaryPresent & updateLevelProducer = 1) : 0..5;
			(adversaryPresent & updateLevelProducer = 2) : 0..5;
			(adversaryPresent & updateLevelProducer = 3) : 0..5;
			TRUE: producer2.allowedPlmns[2];
		esac;
		next(producer2.nfService1.allowedNFTypes[1]) := case
			(!OAMProducerApprove) : producer2.nfService1.allowedNFTypes[1];
			(adversaryPresent & updateLevelProducer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 3) : {none, nf_1, nf_2};
			TRUE: producer2.nfService1.allowedNFTypes[1];
		esac;
		next(producer2.nfService1.allowedNFTypes[2]) := case
			(!OAMProducerApprove) : producer2.nfService1.allowedNFTypes[2];
			(adversaryPresent & updateLevelProducer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 3) : {none, nf_1, nf_2};
			TRUE: producer2.nfService1.allowedNFTypes[2];
		esac;
		next(producer2.nfService1.serviceName) := case
			(!OAMProducerApprove) : producer2.nfService1.serviceName;
			(adversaryPresent & updateLevelProducer = 1) : {none, service_1, service_2};
			(adversaryPresent & updateLevelProducer = 2) : producer2.nfService1.serviceName;
			(adversaryPresent & updateLevelProducer = 3) : producer2.nfService1.serviceName;
			TRUE: producer2.nfService1.serviceName;
		esac;
		next(producer2.nfService1.allowedPlmns[1]) := case
			(!OAMProducerApprove) : producer2.nfService1.allowedPlmns[1];
			(adversaryPresent & updateLevelProducer = 1) : 0..5;
			(adversaryPresent & updateLevelProducer = 2) : 0..5;
			(adversaryPresent & updateLevelProducer = 3) : 0..5;
			TRUE: producer2.nfService1.allowedPlmns[1];
		esac;
		next(producer2.nfService1.allowedPlmns[2]) := case
			(!OAMProducerApprove) : producer2.nfService1.allowedPlmns[2];
			(adversaryPresent & updateLevelProducer = 1) : 0..5;
			(adversaryPresent & updateLevelProducer = 2) : 0..5;
			(adversaryPresent & updateLevelProducer = 3) : 0..5;
			TRUE: producer2.nfService1.allowedPlmns[2];
		esac;
		next(producer2.nfService1.operation1.allowedNFInstances[1]) := case
			(!OAMProducerApprove) : producer2.nfService1.operation1.allowedNFInstances[1];
			(adversaryPresent & updateLevelProducer = 1) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelProducer = 2) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelProducer = 3) : {none, 1, 2, 3, 4,5};
			TRUE: producer2.nfService1.operation1.allowedNFInstances[1];
		esac;
		next(producer2.nfService1.operation1.allowedNFInstances[2]) := case
			(!OAMProducerApprove) : producer2.nfService1.operation1.allowedNFInstances[2];
			(adversaryPresent & updateLevelProducer = 1) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelProducer = 2) : {none, 1, 2, 3, 4,5};
			(adversaryPresent & updateLevelProducer = 3) : {none, 1, 2, 3, 4,5};
			TRUE: producer2.nfService1.operation1.allowedNFInstances[2];
		esac;
		next(producer2.nfService1.operation1.allowedNFTypes[1]) := case
			(!OAMProducerApprove) : producer2.nfService1.operation1.allowedNFTypes[1];
			(adversaryPresent & updateLevelProducer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 3) : {none, nf_1, nf_2};
			TRUE: producer2.nfService1.operation1.allowedNFTypes[1];
		esac;
		next(producer2.nfService1.operation1.allowedNFTypes[2]) := case
			(!OAMProducerApprove) : producer2.nfService1.operation1.allowedNFTypes[2];
			(adversaryPresent & updateLevelProducer = 1) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 2) : {none, nf_1, nf_2};
			(adversaryPresent & updateLevelProducer = 3) : {none, nf_1, nf_2};
			TRUE: producer2.nfService1.operation1.allowedNFTypes[2];
		esac;
		next(producer2.nfService1.operation1.opName) := case
			(!OAMProducerApprove) : producer2.nfService1.operation1.opName;
			(adversaryPresent & updateLevelProducer = 1) : {none, op_1, op_2};
			(adversaryPresent & updateLevelProducer = 2) : producer2.nfService1.operation1.opName;
			(adversaryPresent & updateLevelProducer = 3) : producer2.nfService1.operation1.opName;
			TRUE: producer2.nfService1.operation1.opName;
		esac;
		next(producer2.nfService1.operation1.opScope1) := case
			(!OAMProducerApprove) : producer2.nfService1.operation1.opScope1;
			(adversaryPresent & updateLevelProducer = 1) : {none, service_1, service_2};
			(adversaryPresent & updateLevelProducer = 2) : producer2.nfService1.operation1.opScope1;
			(adversaryPresent & updateLevelProducer = 3) : producer2.nfService1.operation1.opScope1;
			TRUE: producer2.nfService1.operation1.opScope1;
		esac;
		next(producer2.nfService1.operation1.opScope2) := case
			(!OAMProducerApprove) : producer2.nfService1.operation1.opScope2;
			(adversaryPresent & updateLevelProducer = 1) : {none, op_scope_1, op_scope_2};
			(adversaryPresent & updateLevelProducer = 2) : producer2.nfService1.operation1.opScope2;
			(adversaryPresent & updateLevelProducer = 3) : producer2.nfService1.operation1.opScope2;
			TRUE: producer2.nfService1.operation1.opScope2;
		esac;
		next(producer2.nfService1.operation1.param1.isSensitive) := case
			(!OAMProducerApprove) : producer2.nfService1.operation1.param1.isSensitive;
			(adversaryPresent & updateLevelProducer = 1) : {TRUE, FALSE};
			(adversaryPresent & updateLevelProducer = 2) : producer2.nfService1.operation1.param1.isSensitive;
			(adversaryPresent & updateLevelProducer = 3) : producer2.nfService1.operation1.param1.isSensitive;
			TRUE: producer2.nfService1.operation1.param1.isSensitive;
		esac;
		next(producer2.nfService1.operation1.param1.name) := case
			(!OAMProducerApprove) : producer2.nfService1.operation1.param1.name;
			(adversaryPresent & updateLevelProducer = 1) : {none, p1, p2, p3, p4};
			(adversaryPresent & updateLevelProducer = 2) : producer2.nfService1.operation1.param1.name;
			(adversaryPresent & updateLevelProducer = 3) : producer2.nfService1.operation1.param1.name;
			TRUE: producer2.nfService1.operation1.param1.name;
		esac;
		next(producer2.nfService1.operation1.param1.value) := case
			(!OAMProducerApprove) : producer2.nfService1.operation1.param1.value;
			(adversaryPresent & updateLevelProducer = 1) : 0..2;
			(adversaryPresent & updateLevelProducer = 2) : producer2.nfService1.operation1.param1.value;
			(adversaryPresent & updateLevelProducer = 3) : producer2.nfService1.operation1.param1.value;
			TRUE: producer2.nfService1.operation1.param1.value;
		esac;

--
MODULE protocol(consumer1,consumer2,producer1,producer2,OAMConsumerApprove,OAMProducerApprove,
adversaryPresent,adversaryDiscoveryRequest,adversaryATRequest,adversaryServiceRequest,
updateDiscoveryRequest,updateATRequest,updateServiceRequest)
	VAR
		modelParam: ModelParam;  -- for multiple protocol instances, this objects value should not conflict as they work on shared NFs
		--------- Structures ----------------
		consumer : NF;
		producer : NF;
		prod_at_consumer : NF;
		prod_at_vNRF : NF;

		nfDiscoveryRequest: NFDiscoveryRequest(modelParam); 
		vNRFdiscReq: NFDiscoveryRequest(modelParam); 

		accessTokenRequest : AccessTokenRequest(modelParam);
		vNRFaccessTokenReq : AccessTokenRequest(modelParam);

		accessToken : AccessToken(modelParam);
		vNRFaccessToken: AccessToken(modelParam);
		serviceRequest: ServiceRequest;

		-- ccaAtScp: CCA(modelParam);

		--------- State variable ----------------
		initConsumer: boolean;
		initDiscoveryRequest: boolean;
		initProducer: boolean;
		initATRequest: boolean;
		initServiceRequest: boolean;

		--------- random variable----------------
		selectConsumer : 1..2; -- choose one consumer randomly from consumer1 and consumer2
		selectProducer : 1..2; -- choose one producer randomly from producer1 and producer2 (for prod_at_consumer)
		vNrfSelectProducer : 1..2; -- choose one producer randomly from producer1 and producer2 (for prod_at_vNrf)
		selectConsumerPlmn: boolean;

		
--	
	
	DEFINE
		------------ nfDiscovery packet logics ----------------
		sendDiscReq_Direct_specProducer_init := 
			(modelParam.atrType = specificProducer & initConsumer & !initDiscoveryRequest);
		sendDiscReq_Direct_specProducer_update :=
			(modelParam.atrType = specificProducer & initDiscoveryRequest & updateDiscoveryRequest);
		sendDiscReq_Direct_specNFType_init := 
			(modelParam.atrType = specificNFType & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest);
		sendDiscReq_Direct_specNFType_update :=
			(modelParam.atrType = specificNFType & accessToken.isTokenValid & initDiscoveryRequest & updateDiscoveryRequest);

		------------ AccessTokenRequest packet logics ----------------
		sendATReq_Direct_specProducer_init := 
			(modelParam.atrType = specificProducer & initConsumer & prod_at_consumer.isNFInstanceValid & !initATRequest);
		sendATReq_Direct_specProducer_update :=
			(modelParam.atrType = specificProducer & prod_at_consumer.isNFInstanceValid & initATRequest & updateATRequest);
		sendATReq_Direct_specNFType_init := 
			(modelParam.atrType = specificNFType & initConsumer & !initATRequest);
		sendATReq_Direct_specNFType_update :=
			(modelParam.atrType = specificNFType & initATRequest & updateATRequest);

		------------ ServiceRequest packet logics ----------------
		sendServReq_Direct_adversary :=
			consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & adversaryPresent & adversaryServiceRequest;
		sendServReq_Direct_init :=
			consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest;
		sendServReq_Direct_update :=
			consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest;
		
		------------ Authorization logics ----------------
		vNrfDiscoveryCheck :=
			nfDiscoveryRequest.isNFDiscReqValid
			&
			((modelParam.crossProfileCheckRequired in {DR, ALL}) -> (
				consumer.isNFInstanceValid
				& nfDiscoveryRequest.requesterID = consumer.nfInstanceId
				& nfDiscoveryRequest.requesterNFType = consumer.nfType
				& (nfDiscoveryRequest.requesterPlmn != 0 -> nfDiscoveryRequest.requesterPlmn in {consumer.plmns[1], consumer.plmns[2]})
			));
		
		vNrfATRcheck :=
			accessTokenRequest.isATReqValid
			&
			((modelParam.crossProfileCheckRequired in {ATR, ALL}) -> (
				consumer.isNFInstanceValid
				& accessTokenRequest.nfInstanceId = consumer.nfInstanceId
				& accessTokenRequest.requesterPlmn != 0
				& accessTokenRequest.requesterPlmn in {consumer.plmns[1], consumer.plmns[2]}
				& (modelParam.atrType = specificNFType -> accessTokenRequest.requesterNFType = consumer.nfType)
			));

		foundNF := isNFDiscovered1 | isNFDiscovered2;
		isNFDiscovered1 := case
			TRUE: hNrfIsNFDiscovered1;
		esac;
		isNFDiscovered2 := case
			TRUE: hNrfIsNFDiscovered2;
		esac;
		hNrfFoundNF := hNrfIsNFDiscovered1 | hNrfIsNFDiscovered1;
		hNrfIsNFDiscovered1 := case
			vNRFdiscReq.isNFDiscReqValid
			-- & consumer.isNFInstanceValid
			& producer1.isNFInstanceValid
			
			& vNRFdiscReq.requesterID != producer1.nfInstanceId
			& vNRFdiscReq.targetNFType = producer1.nfType
			& (
				(vNRFdiscReq.targetNfInstanceId != none)->
					vNRFdiscReq.targetNfInstanceId = producer1.nfInstanceId
			)
			-- For roaming, targetPlmns is mandatory and only the first one is considered
			& (vNRFdiscReq.targetPlmns != 0 & vNRFdiscReq.targetPlmns = producer1.plmns[1])
			& vNRFdiscReq.requesterPlmn != 0
			/-- For roaming, requesterNfFqdn == allowedNFDomains check is ignored. --/
			& ((vNRFdiscReq.serviceName = none) -> -- search for all nfservices available in the producer
				(   
					producer1.nfService1.isServiceInstanceValid
					&
					(( !(producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) )-> (
							(vNRFdiscReq.requesterNFType in {producer1.nfService1.allowedNFTypes[1], producer1.nfService1.allowedNFTypes[2]})
					))
					&
					((producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) -> (
						(( !(producer1.allowedNFTypes[1] = none & producer1.allowedNFTypes[2] = none) ) -> (
								(vNRFdiscReq.requesterNFType in {producer1.allowedNFTypes[1], producer1.allowedNFTypes[2]})
						)) 
					))
					-- requesterPlmn == (allowedPlmns of both nf and nf service)
					& (
						(   
							(vNRFdiscReq.requesterPlmn != 0 & !(producer1.allowedPlmns[1] = 0 & producer1.allowedPlmns[2] = 0 & producer1.nfService1.allowedPlmns[1] = 0 & producer1.nfService1.allowedPlmns[2] = 0))->
								vNRFdiscReq.requesterPlmn in {producer1.allowedPlmns[1], producer1.allowedPlmns[2],
									producer1.nfService1.allowedPlmns[1], producer1.nfService1.allowedPlmns[2]}
						)
					)
				)
			)
			& ( (vNRFdiscReq.serviceName != none)-> 
				(
					(vNRFdiscReq.serviceName in {producer1.nfService1.serviceName})
					&
					(vNRFdiscReq.serviceName = producer1.nfService1.serviceName ->
						(   
							producer1.nfService1.isServiceInstanceValid
							&
							(( !(producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) )-> (
									(vNRFdiscReq.requesterNFType in {producer1.nfService1.allowedNFTypes[1], producer1.nfService1.allowedNFTypes[2]})
							))
							&
							((producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) -> (
								(( !(producer1.allowedNFTypes[1] = none & producer1.allowedNFTypes[2] = none) ) -> (
										(vNRFdiscReq.requesterNFType in {producer1.allowedNFTypes[1], producer1.allowedNFTypes[2]})
								))
							))
							-- requesterPlmn == (allowedPlmns of both nf and nf service)
							& (
								(   
									(vNRFdiscReq.requesterPlmn != 0 & !(producer1.allowedPlmns[1] = 0 & producer1.allowedPlmns[2] = 0 & producer1.nfService1.allowedPlmns[1] = 0 & producer1.nfService1.allowedPlmns[2] = 0))->
										vNRFdiscReq.requesterPlmn in {producer1.allowedPlmns[1], producer1.allowedPlmns[2],
											producer1.nfService1.allowedPlmns[1], producer1.nfService1.allowedPlmns[2]}
								)
							)
						)
					) 
				)  
			)
				: TRUE;
			TRUE: FALSE;
		esac;
		hNrfIsNFDiscovered2 := case
			vNRFdiscReq.isNFDiscReqValid
			-- & consumer.isNFInstanceValid
			& producer2.isNFInstanceValid
			
			& vNRFdiscReq.requesterID != producer2.nfInstanceId
			& vNRFdiscReq.targetNFType = producer2.nfType
			& (
				(vNRFdiscReq.targetNfInstanceId != none)->
					vNRFdiscReq.targetNfInstanceId = producer2.nfInstanceId
			)
			-- For roaming, targetPlmns is mandatory and only the first one is considered
			& (vNRFdiscReq.targetPlmns != 0 & vNRFdiscReq.targetPlmns = producer2.plmns[1])
			& vNRFdiscReq.requesterPlmn != 0
			/-- For roaming, requesterNfFqdn == allowedNFDomains check is ignored. --/
			& ((vNRFdiscReq.serviceName = none) -> -- search for all nfservices available in the producer
				(   
					producer2.nfService1.isServiceInstanceValid
					&
					(( !(producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) )-> (
							(vNRFdiscReq.requesterNFType in {producer2.nfService1.allowedNFTypes[1], producer2.nfService1.allowedNFTypes[2]})
					))
					&
					((producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) -> (
						(( !(producer2.allowedNFTypes[1] = none & producer2.allowedNFTypes[2] = none) ) -> (
								(vNRFdiscReq.requesterNFType in {producer2.allowedNFTypes[1], producer2.allowedNFTypes[2]})
						)) 
					))
					-- requesterPlmn == (allowedPlmns of both nf and nf service)
					& (
						(   
							(vNRFdiscReq.requesterPlmn != 0 & !(producer2.allowedPlmns[1] = 0 & producer2.allowedPlmns[2] = 0 & producer2.nfService1.allowedPlmns[1] = 0 & producer2.nfService1.allowedPlmns[2] = 0))->
								vNRFdiscReq.requesterPlmn in {producer2.allowedPlmns[1], producer2.allowedPlmns[2],
									producer2.nfService1.allowedPlmns[1], producer2.nfService1.allowedPlmns[2]}
						)
					)
				)
			)
			& ( (vNRFdiscReq.serviceName != none)-> 
				(
					(vNRFdiscReq.serviceName in {producer2.nfService1.serviceName})
					&
					(vNRFdiscReq.serviceName = producer2.nfService1.serviceName ->
						(   
							producer2.nfService1.isServiceInstanceValid
							&
							(( !(producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) )-> (
									(vNRFdiscReq.requesterNFType in {producer2.nfService1.allowedNFTypes[1], producer2.nfService1.allowedNFTypes[2]})
							))
							&
							((producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) -> (
								(( !(producer2.allowedNFTypes[1] = none & producer2.allowedNFTypes[2] = none) ) -> (
										(vNRFdiscReq.requesterNFType in {producer2.allowedNFTypes[1], producer2.allowedNFTypes[2]})
								))
							))
							-- requesterPlmn == (allowedPlmns of both nf and nf service)
							& (
								(   
									(vNRFdiscReq.requesterPlmn != 0 & !(producer2.allowedPlmns[1] = 0 & producer2.allowedPlmns[2] = 0 & producer2.nfService1.allowedPlmns[1] = 0 & producer2.nfService1.allowedPlmns[2] = 0))->
										vNRFdiscReq.requesterPlmn in {producer2.allowedPlmns[1], producer2.allowedPlmns[2],
											producer2.nfService1.allowedPlmns[1], producer2.nfService1.allowedPlmns[2]}
								)
							)
						)
					) 
				)  
			)
				: TRUE;
			TRUE: FALSE;
		esac;

		--------------------- Validate Access Token Request-----------------
		hNRFisAccessTokenReqAuthorized := case
			modelParam.atrType = specificProducer &  hNRFisServiceLevelATReqAuthorizedForSpecificProducer : TRUE;
			modelParam.atrType = specificNFType &  (hNRFisServiceLevelATReqAuthorizedForProducer1 | hNRFisServiceLevelATReqAuthorizedForProducer2 ) : TRUE;
			TRUE: FALSE;
		esac;
		hNRFisOpLevelATReqAuthorized := case
			modelParam.atrType = specificProducer &  hNRFisOpLevelATReqAuthorizedForSpecificProducer : TRUE;
			modelParam.atrType = specificNFType &  (hNRFisOpLevelATReqAuthorizedForProducer1 | hNRFisOpLevelATReqAuthorizedForProducer2 ) : TRUE;
			TRUE: FALSE;
		esac;
		/-- cross-prfile check is no more for ATR in roaming case--/
		hNRFisServiceLevelATReqAuthorizedForSpecificProducer := case
			(
				modelParam.atrType = specificProducer
				& vNRFaccessTokenReq.isATReqValid
				& producer.isNFInstanceValid
				-- & consumer.isNFInstanceValid
				& (vNRFaccessTokenReq.nfInstanceId != vNRFaccessTokenReq.targetNfInstanceId)
				
				& (vNRFaccessTokenReq.targetNfInstanceId = producer.nfInstanceId)
				& (vNRFaccessTokenReq.scopeService in {producer.nfService1.serviceName})
				-- & (vNRFaccessTokenReq.nfInstanceId = consumer.nfInstanceId)
				& (vNRFaccessTokenReq.targetPlmn != 0 & vNRFaccessTokenReq.targetPlmn in {producer.plmns[1], producer.plmns[2]})
				& vNRFaccessTokenReq.requesterPlmn != 0
				& vNRFaccessTokenReq.requesterPlmn in {producer.allowedPlmns[1], producer.allowedPlmns[2], 
					producer.nfService1.allowedPlmns[1], producer.nfService1.allowedPlmns[2]}
				&
				((vNRFaccessTokenReq.scopeService = producer.nfService1.serviceName) -> (
					(producer.nfService1.isServiceInstanceValid)
					&
					(( !(producer.nfService1.allowedNFTypes[1] = none & producer.nfService1.allowedNFTypes[2] = none) )-> (
							(vNRFaccessTokenReq.requesterNFType in {producer.nfService1.allowedNFTypes[1], producer.nfService1.allowedNFTypes[2]})
							| vNRFaccessTokenReq.requesterNFType = none
					))
					&
					((producer.nfService1.allowedNFTypes[1] = none & producer.nfService1.allowedNFTypes[2] = none) -> (
						(( !(producer.allowedNFTypes[1] = none & producer.allowedNFTypes[2] = none) ) -> (
								(vNRFaccessTokenReq.requesterNFType in {producer.allowedNFTypes[1], producer.allowedNFTypes[2]})
								| vNRFaccessTokenReq.requesterNFType = none
						))
					))
				))
			)
				: TRUE;
			TRUE : FALSE;
		esac;

		hNRFisServiceLevelATReqAuthorizedForProducer1 := case
			(
				modelParam.atrType = specificNFType
				& vNRFaccessTokenReq.isATReqValid
				& producer1.isNFInstanceValid
				-- & consumer.isNFInstanceValid
				& (vNRFaccessTokenReq.nfInstanceId != producer1.nfInstanceId)

				& (vNRFaccessTokenReq.targetNFType = producer1.nfType) -- target: targetNFType
				& (vNRFaccessTokenReq.scopeService in {producer1.nfService1.serviceName})
				-- & (vNRFaccessTokenReq.nfInstanceId = consumer.nfInstanceId)
				& (vNRFaccessTokenReq.targetPlmn != 0 & vNRFaccessTokenReq.targetPlmn in {producer1.plmns[1], producer1.plmns[2]}) -- target: targetPlmn
				& vNRFaccessTokenReq.requesterPlmn != 0 -- Aauth Param: requesterPlmn
				& vNRFaccessTokenReq.requesterPlmn in {producer1.allowedPlmns[1], producer1.allowedPlmns[2], 
					producer1.nfService1.allowedPlmns[1], producer1.nfService1.allowedPlmns[2]}
				&
				((vNRFaccessTokenReq.scopeService = producer1.nfService1.serviceName) -> (
					(producer1.nfService1.isServiceInstanceValid)
					& -- Aauth Param: requesterNFType
					(( !(producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) )-> (
							(vNRFaccessTokenReq.requesterNFType in {producer1.nfService1.allowedNFTypes[1], producer1.nfService1.allowedNFTypes[2]})
							| vNRFaccessTokenReq.requesterNFType = none
					))
					&
					((producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) -> (
						(( !(producer1.allowedNFTypes[1] = none & producer1.allowedNFTypes[2] = none) ) -> (
								(vNRFaccessTokenReq.requesterNFType in {producer1.allowedNFTypes[1], producer1.allowedNFTypes[2]})
								| vNRFaccessTokenReq.requesterNFType = none
						)) 
					))
				))
			)
				: TRUE;
			TRUE : FALSE;
		esac;

		hNRFisServiceLevelATReqAuthorizedForProducer2 := case
			(
				modelParam.atrType = specificNFType
				& vNRFaccessTokenReq.isATReqValid
				& producer2.isNFInstanceValid
				-- & consumer.isNFInstanceValid
				& (vNRFaccessTokenReq.nfInstanceId != producer2.nfInstanceId)

				& (vNRFaccessTokenReq.targetNFType = producer2.nfType) -- target: targetNFType
				& (vNRFaccessTokenReq.scopeService in {producer2.nfService1.serviceName})
				-- & (vNRFaccessTokenReq.nfInstanceId = consumer.nfInstanceId)
				& (vNRFaccessTokenReq.targetPlmn != 0 & vNRFaccessTokenReq.targetPlmn in {producer2.plmns[1], producer2.plmns[2]}) -- target: targetPlmn
				& vNRFaccessTokenReq.requesterPlmn != 0 -- Aauth Param: requesterPlmn
				& vNRFaccessTokenReq.requesterPlmn in {producer2.allowedPlmns[1], producer2.allowedPlmns[2], 
					producer2.nfService1.allowedPlmns[1], producer2.nfService1.allowedPlmns[2]}
				&
				((vNRFaccessTokenReq.scopeService = producer2.nfService1.serviceName) -> (
					(producer2.nfService1.isServiceInstanceValid)
					& -- Aauth Param: requesterNFType
					(( !(producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) )-> (
							(vNRFaccessTokenReq.requesterNFType in {producer2.nfService1.allowedNFTypes[1], producer2.nfService1.allowedNFTypes[2]})
							| vNRFaccessTokenReq.requesterNFType = none
					))
					&
					((producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) -> (
						(( !(producer2.allowedNFTypes[1] = none & producer2.allowedNFTypes[2] = none) ) -> (
								(vNRFaccessTokenReq.requesterNFType in {producer2.allowedNFTypes[1], producer2.allowedNFTypes[2]})
								| vNRFaccessTokenReq.requesterNFType = none
						)) 
					))
				))
			)
				: TRUE;
			TRUE : FALSE;
		esac;

		hNRFisOpLevelATReqAuthorizedForSpecificProducer := case
			(
				hNRFisServiceLevelATReqAuthorizedForSpecificProducer

				-- & vNRFaccessTokenReq.isATReqValid
				-- & producer.isNFInstanceValid
				-- & consumer.isNFInstanceValid
				-- & (vNRFaccessTokenReq.nfInstanceId != vNRFaccessTokenReq.targetNfInstanceId)
				
				-- & (vNRFaccessTokenReq.targetNfInstanceId = producer.nfInstanceId)
				-- & (vNRFaccessTokenReq.nfInstanceId = consumer.nfInstanceId)
				
				& vNRFaccessTokenReq.scopeOperation != none
				&
				(vNRFaccessTokenReq.scopeOperation in {producer.nfService1.operation1.opScope2})

				& 
				((vNRFaccessTokenReq.scopeOperation = producer.nfService1.operation1.opScope2) -> (
					producer.nfService1.operation1.isOperationValid
					& -- only allowedNFInstances relevant for specific producer
					((!( producer.nfService1.operation1.allowedNFInstances[1] = none & producer.nfService1.operation1.allowedNFInstances[2] = none)) -> (
							vNRFaccessTokenReq.nfInstanceId in {producer.nfService1.operation1.allowedNFInstances[1], producer.nfService1.operation1.allowedNFInstances[2]}
						)
					)
				))
			)
				: TRUE;
			TRUE : FALSE;
		esac;
		
		hNRFisOpLevelATReqAuthorizedForProducer1 := case
			(
				hNRFisServiceLevelATReqAuthorizedForProducer1

				-- & vNRFaccessTokenReq.isATReqValid
				-- & producer1.isNFInstanceValid
				-- & consumer.isNFInstanceValid
				-- & (vNRFaccessTokenReq.nfInstanceId != producer1.nfInstanceId)
					
				-- & (vNRFaccessTokenReq.targetNFType = producer1.nfType)
				-- & (vNRFaccessTokenReq.nfInstanceId = consumer.nfInstanceId)
				
				& vNRFaccessTokenReq.scopeOperation != none
				&
				(vNRFaccessTokenReq.scopeOperation in {producer1.nfService1.operation1.opScope2})

				&
				((vNRFaccessTokenReq.scopeOperation = producer1.nfService1.operation1.opScope2) -> (
					producer1.nfService1.operation1.isOperationValid
					& -- Aauth Param: requesterNFType
					((!(producer1.nfService1.operation1.allowedNFTypes[1] = none & producer1.nfService1.operation1.allowedNFTypes[2] = none)) ->
						( vNRFaccessTokenReq.requesterNFType in {producer1.nfService1.operation1.allowedNFTypes[1], producer1.nfService1.operation1.allowedNFTypes[2]})
					)
					& -- Aauth Param: nfInstanceId
					((!( producer1.nfService1.operation1.allowedNFInstances[1] = none & producer1.nfService1.operation1.allowedNFInstances[2] = none)) -> (
							vNRFaccessTokenReq.nfInstanceId in {producer1.nfService1.operation1.allowedNFInstances[1], producer1.nfService1.operation1.allowedNFInstances[2]}
						)
					)
				))
			)
				: TRUE;
			TRUE : FALSE;
		esac;
		
		hNRFisOpLevelATReqAuthorizedForProducer2 := case
			(
				-- & modelParam.atrType = specificNFType
				hNRFisServiceLevelATReqAuthorizedForProducer2

				-- & vNRFaccessTokenReq.isATReqValid
				-- & producer2.isNFInstanceValid
				-- & consumer.isNFInstanceValid
				-- & (vNRFaccessTokenReq.nfInstanceId != producer2.nfInstanceId)
					
				-- & (vNRFaccessTokenReq.targetNFType = producer2.nfType)
				-- & (vNRFaccessTokenReq.nfInstanceId = consumer.nfInstanceId)
				
				& vNRFaccessTokenReq.scopeOperation != none
				&
				(vNRFaccessTokenReq.scopeOperation in {producer2.nfService1.operation1.opScope2})

				&
				((vNRFaccessTokenReq.scopeOperation = producer2.nfService1.operation1.opScope2) -> (
					producer2.nfService1.operation1.isOperationValid
					& -- Aauth Param: requesterNFType
					((!(producer2.nfService1.operation1.allowedNFTypes[1] = none & producer2.nfService1.operation1.allowedNFTypes[2] = none)) ->
						( vNRFaccessTokenReq.requesterNFType in {producer2.nfService1.operation1.allowedNFTypes[1], producer2.nfService1.operation1.allowedNFTypes[2]})
					)
					& -- Aauth Param: nfInstanceId
					((!( producer2.nfService1.operation1.allowedNFInstances[1] = none & producer2.nfService1.operation1.allowedNFInstances[2] = none)) -> (
							vNRFaccessTokenReq.nfInstanceId in {producer2.nfService1.operation1.allowedNFInstances[1], producer2.nfService1.operation1.allowedNFInstances[2]}
						)
					)
				))
			)
				: TRUE;
			TRUE : FALSE;
		esac;
		
		/-- service request check -- by NFp --/
		isServiceReqGranted := 
		case
			serviceRequest.isServiceRequestValid
			& producer.isNFInstanceValid
			
			& accessToken.isTokenValid
			& serviceRequest.subjectID = accessToken.sub
			& serviceRequest.audienceID = producer.nfInstanceId
			& (modelParam.atrType = specificProducer -> (accessToken.aud_NFInstanceId = producer.nfInstanceId))
			& ((modelParam.atrType = specificNFType) -> (accessToken.aud_NFType = producer.nfType))
			& serviceRequest.service = accessToken.scopeService 
			& (
				(producer.nfService1.isServiceInstanceValid & serviceRequest.service = producer.nfService1.serviceName)
			)
			& serviceRequest.operation in {producer.nfService1.operation1.opName}
			& ( 
				(serviceRequest.operation = producer.nfService1.operation1.opName) -> (
					producer.nfService1.operation1.isOperationValid
					&
					((producer.nfService1.operation1.opScope1 != none) -> (
						accessToken.scopeService = producer.nfService1.operation1.opScope1
					))
					&
					((producer.nfService1.operation1.opScope1 = none) -> (
						accessToken.scopeService = producer.nfService1.serviceName
					))
					& 
					((producer.nfService1.operation1.opScope2 != none) -> (
						accessToken.scopeOperation = producer.nfService1.operation1.opScope2
					))  
				)
			)
			& (
				((accessToken.consumerPlmn!= 0 & !(producer.nfService1.allowedPlmns[1] = 0 & producer.nfService1.allowedPlmns[2]= 0)) ->  (
					accessToken.consumerPlmn in {producer.nfService1.allowedPlmns[2], producer.nfService1.allowedPlmns[2]}
				))
				& ((accessToken.consumerPlmn!= 0 & (producer.nfService1.allowedPlmns[1] = 0 & producer.nfService1.allowedPlmns[2]= 0) & !(producer.allowedPlmns[1] = 0 & producer.allowedPlmns[2]= 0)) ->  (
					accessToken.consumerPlmn in {producer.allowedPlmns[1], producer.allowedPlmns[2]}
				))
				& ( accessToken.producerPlmn!= 0 ->  (
					accessToken.producerPlmn in {producer.plmns[1], producer.plmns[2]}
				))
			)
				: TRUE;
			TRUE: FALSE; -- isServiceReqGranted;
		esac;
		
		isOperationParametersAuthorized:=
		case
			serviceRequest.operation = producer.nfService1.operation1.opName & producer.nfService1.operation1.isParamVerified : TRUE;
			TRUE: FALSE;
		esac;

		consumerPlmn := 
		case
			consumer.plmns[1] != 0 & consumer.plmns[2] != 0 & selectConsumerPlmn : consumer.plmns[1];
			consumer.plmns[1] != 0 & consumer.plmns[2] != 0 & !selectConsumerPlmn : consumer.plmns[2];
			consumer.plmns[1] != 0 :  consumer.plmns[1];
			consumer.plmns[2] != 0 :  consumer.plmns[2];
			TRUE: 0;
		esac;

	ASSIGN
		---------- init variables ----------
		init(initConsumer) := FALSE;
		next(initConsumer) := consumer.model_id = 0 ? TRUE: initConsumer;
		init(initProducer) := FALSE;
		next(initProducer) := (producer.model_id = 0 & (isNFDiscovered1 | isNFDiscovered2)) ? TRUE: initProducer;
		
		init(initDiscoveryRequest) := FALSE;
		next(initDiscoveryRequest) := case
			(sendDiscReq_Direct_specProducer_init) : TRUE;
			(sendDiscReq_Direct_specNFType_init) : TRUE;
			TRUE: initDiscoveryRequest;
		esac;
		
		init(initATRequest) := FALSE;
		next(initATRequest) := case
			(sendATReq_Direct_specProducer_init): TRUE;
			(sendATReq_Direct_specNFType_init) : TRUE;
			TRUE : initATRequest;
		esac;
		
		init(initServiceRequest) := FALSE;
		next(initServiceRequest) := case
			(sendServReq_Direct_init) : TRUE;
			TRUE: initServiceRequest;
		esac;
		

		---------- consumer selection : any of consumer1 and consumer2 --------------------
		init(consumer.model_id) := 0;
		init(consumer.nfInstanceId) := none;
		init(consumer.nfType) := none;
		init(consumer.plmns[1]) := 0;
		init(consumer.plmns[2]) := 0;
		init(consumer.allowedNFTypes[1]) := none;
		init(consumer.allowedNFTypes[2]) := none;
		init(consumer.allowedPlmns[1]) := 0;
		init(consumer.allowedPlmns[2]) := 0;
		init(consumer.nfService1.allowedNFTypes[1]) := none;
		init(consumer.nfService1.allowedNFTypes[2]) := none;
		init(consumer.nfService1.serviceName) := none;
		init(consumer.nfService1.allowedPlmns[1]) := 0;
		init(consumer.nfService1.allowedPlmns[2]) := 0;
		init(consumer.nfService1.operation1.allowedNFInstances[1]) := none;
		init(consumer.nfService1.operation1.allowedNFInstances[2]) := none;
		init(consumer.nfService1.operation1.allowedNFTypes[1]) := none;
		init(consumer.nfService1.operation1.allowedNFTypes[2]) := none;
		init(consumer.nfService1.operation1.opName) := none;
		init(consumer.nfService1.operation1.opScope1) := none;
		init(consumer.nfService1.operation1.opScope2) := none;
		init(consumer.nfService1.operation1.param1.isSensitive) := FALSE;
		init(consumer.nfService1.operation1.param1.name) := none;
		init(consumer.nfService1.operation1.param1.value) := 0;

		---------- consumer NF update -----------------
		next(consumer.model_id) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.model_id;
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.model_id;
			(consumer.model_id = consumer1.model_id) : consumer1.model_id;
			(consumer.model_id = consumer2.model_id) : consumer2.model_id;
			TRUE : consumer.model_id;
		esac;
		next(consumer.nfInstanceId) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfInstanceId;
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfInstanceId;
			(consumer.model_id = consumer1.model_id) : consumer1.nfInstanceId;
			(consumer.model_id = consumer2.model_id) : consumer2.nfInstanceId;
			TRUE : consumer.nfInstanceId;
		esac;
		next(consumer.nfType) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfType;
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfType;
			(consumer.model_id = consumer1.model_id) : consumer1.nfType;
			(consumer.model_id = consumer2.model_id) : consumer2.nfType;
			TRUE : consumer.nfType;
		esac;
		next(consumer.plmns[1]) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.plmns[1];
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.plmns[1];
			(consumer.model_id = consumer1.model_id) : consumer1.plmns[1];
			(consumer.model_id = consumer2.model_id) : consumer2.plmns[1];
			TRUE : consumer.plmns[1];
		esac;
		next(consumer.plmns[2]) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.plmns[2];
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.plmns[2];
			(consumer.model_id = consumer1.model_id) : consumer1.plmns[2];
			(consumer.model_id = consumer2.model_id) : consumer2.plmns[2];
			TRUE : consumer.plmns[2];
		esac;
		next(consumer.allowedNFTypes[1]) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.allowedNFTypes[1];
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.allowedNFTypes[1];
			(consumer.model_id = consumer1.model_id) : consumer1.allowedNFTypes[1];
			(consumer.model_id = consumer2.model_id) : consumer2.allowedNFTypes[1];
			TRUE : consumer.allowedNFTypes[1];
		esac;
		next(consumer.allowedNFTypes[2]) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.allowedNFTypes[2];
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.allowedNFTypes[2];
			(consumer.model_id = consumer1.model_id) : consumer1.allowedNFTypes[2];
			(consumer.model_id = consumer2.model_id) : consumer2.allowedNFTypes[2];
			TRUE : consumer.allowedNFTypes[2];
		esac;
		next(consumer.allowedPlmns[1]) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.allowedPlmns[1];
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.allowedPlmns[1];
			(consumer.model_id = consumer1.model_id) : consumer1.allowedPlmns[1];
			(consumer.model_id = consumer2.model_id) : consumer2.allowedPlmns[1];
			TRUE : consumer.allowedPlmns[1];
		esac;
		next(consumer.allowedPlmns[2]) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.allowedPlmns[2];
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.allowedPlmns[2];
			(consumer.model_id = consumer1.model_id) : consumer1.allowedPlmns[2];
			(consumer.model_id = consumer2.model_id) : consumer2.allowedPlmns[2];
			TRUE : consumer.allowedPlmns[2];
		esac;
		next(consumer.nfService1.allowedNFTypes[1]) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.allowedNFTypes[1];
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.allowedNFTypes[1];
			(consumer.model_id = consumer1.model_id) : consumer1.nfService1.allowedNFTypes[1];
			(consumer.model_id = consumer2.model_id) : consumer2.nfService1.allowedNFTypes[1];
			TRUE : consumer.nfService1.allowedNFTypes[1];
		esac;
		next(consumer.nfService1.allowedNFTypes[2]) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.allowedNFTypes[2];
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.allowedNFTypes[2];
			(consumer.model_id = consumer1.model_id) : consumer1.nfService1.allowedNFTypes[2];
			(consumer.model_id = consumer2.model_id) : consumer2.nfService1.allowedNFTypes[2];
			TRUE : consumer.nfService1.allowedNFTypes[2];
		esac;
		next(consumer.nfService1.serviceName) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.serviceName;
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.serviceName;
			(consumer.model_id = consumer1.model_id) : consumer1.nfService1.serviceName;
			(consumer.model_id = consumer2.model_id) : consumer2.nfService1.serviceName;
			TRUE : consumer.nfService1.serviceName;
		esac;
		next(consumer.nfService1.allowedPlmns[1]) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.allowedPlmns[1];
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.allowedPlmns[1];
			(consumer.model_id = consumer1.model_id) : consumer1.nfService1.allowedPlmns[1];
			(consumer.model_id = consumer2.model_id) : consumer2.nfService1.allowedPlmns[1];
			TRUE : consumer.nfService1.allowedPlmns[1];
		esac;
		next(consumer.nfService1.allowedPlmns[2]) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.allowedPlmns[2];
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.allowedPlmns[2];
			(consumer.model_id = consumer1.model_id) : consumer1.nfService1.allowedPlmns[2];
			(consumer.model_id = consumer2.model_id) : consumer2.nfService1.allowedPlmns[2];
			TRUE : consumer.nfService1.allowedPlmns[2];
		esac;
		next(consumer.nfService1.operation1.allowedNFInstances[1]) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.allowedNFInstances[1];
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.allowedNFInstances[1];
			(consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.allowedNFInstances[1];
			(consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.allowedNFInstances[1];
			TRUE : consumer.nfService1.operation1.allowedNFInstances[1];
		esac;
		next(consumer.nfService1.operation1.allowedNFInstances[2]) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.allowedNFInstances[2];
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.allowedNFInstances[2];
			(consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.allowedNFInstances[2];
			(consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.allowedNFInstances[2];
			TRUE : consumer.nfService1.operation1.allowedNFInstances[2];
		esac;
		next(consumer.nfService1.operation1.allowedNFTypes[1]) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.allowedNFTypes[1];
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.allowedNFTypes[1];
			(consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.allowedNFTypes[1];
			(consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.allowedNFTypes[1];
			TRUE : consumer.nfService1.operation1.allowedNFTypes[1];
		esac;
		next(consumer.nfService1.operation1.allowedNFTypes[2]) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.allowedNFTypes[2];
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.allowedNFTypes[2];
			(consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.allowedNFTypes[2];
			(consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.allowedNFTypes[2];
			TRUE : consumer.nfService1.operation1.allowedNFTypes[2];
		esac;
		next(consumer.nfService1.operation1.opName) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.opName;
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.opName;
			(consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.opName;
			(consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.opName;
			TRUE : consumer.nfService1.operation1.opName;
		esac;
		next(consumer.nfService1.operation1.opScope1) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.opScope1;
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.opScope1;
			(consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.opScope1;
			(consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.opScope1;
			TRUE : consumer.nfService1.operation1.opScope1;
		esac;
		next(consumer.nfService1.operation1.opScope2) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.opScope2;
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.opScope2;
			(consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.opScope2;
			(consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.opScope2;
			TRUE : consumer.nfService1.operation1.opScope2;
		esac;
		next(consumer.nfService1.operation1.param1.isSensitive) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.param1.isSensitive;
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.param1.isSensitive;
			(consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.param1.isSensitive;
			(consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.param1.isSensitive;
			TRUE : consumer.nfService1.operation1.param1.isSensitive;
		esac;
		next(consumer.nfService1.operation1.param1.name) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.param1.name;
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.param1.name;
			(consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.param1.name;
			(consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.param1.name;
			TRUE : consumer.nfService1.operation1.param1.name;
		esac;
		next(consumer.nfService1.operation1.param1.value) := case 
			(consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.param1.value;
			(consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.param1.value;
			(consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.param1.value;
			(consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.param1.value;
			TRUE : consumer.nfService1.operation1.param1.value;
		esac;

		---------- begin nfDiscoveryRequest next ----------
		next(nfDiscoveryRequest.requesterID) := case
			(initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, 1, 2, 3, 4,5};
			(sendDiscReq_Direct_specProducer_init) : consumer.nfInstanceId;
			(sendDiscReq_Direct_specProducer_update) : consumer.nfInstanceId;
			(sendDiscReq_Direct_specNFType_init) : consumer.nfInstanceId;
			(sendDiscReq_Direct_specNFType_update) : consumer.nfInstanceId;
			TRUE: nfDiscoveryRequest.requesterID;
		esac;
		next(nfDiscoveryRequest.targetNFType) := case
			(initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, nf_1, nf_2};
			(sendDiscReq_Direct_specProducer_init) : {none, nf_1, nf_2};
			(sendDiscReq_Direct_specProducer_update) : {none, nf_1, nf_2};
			(sendDiscReq_Direct_specNFType_init) : accessToken.aud_NFType;
			(sendDiscReq_Direct_specNFType_update) : accessToken.aud_NFType;
			TRUE: nfDiscoveryRequest.targetNFType;
		esac;
		next(nfDiscoveryRequest.requesterNFType) := case
			(initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, nf_1, nf_2};
			(sendDiscReq_Direct_specProducer_init) : consumer.nfType;
			(sendDiscReq_Direct_specProducer_update) : consumer.nfType;
			(sendDiscReq_Direct_specNFType_init) : consumer.nfType;
			(sendDiscReq_Direct_specNFType_update) : consumer.nfType;
			TRUE: nfDiscoveryRequest.requesterNFType;
		esac;
		next(nfDiscoveryRequest.serviceName) := case
			(initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, service_1, service_2};
			(sendDiscReq_Direct_specProducer_init) : {none, service_1, service_2};
			(sendDiscReq_Direct_specProducer_update) : {none, service_1, service_2};
			(sendDiscReq_Direct_specNFType_init) : accessToken.scopeService;
			(sendDiscReq_Direct_specNFType_update) : accessToken.scopeService;
			TRUE: nfDiscoveryRequest.serviceName;
		esac;
		next(nfDiscoveryRequest.targetNfInstanceId) := case
			(initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, 1, 2, 3, 4,5};
			(sendDiscReq_Direct_specProducer_init) : {none, producer1.nfInstanceId, producer2.nfInstanceId};
			(sendDiscReq_Direct_specProducer_update) : {none, producer1.nfInstanceId, producer2.nfInstanceId};
			(sendDiscReq_Direct_specNFType_init) : {none, 1, 2, 3, 4,5};
			(sendDiscReq_Direct_specNFType_update) : {none, 1, 2, 3, 4,5};
			TRUE: nfDiscoveryRequest.targetNfInstanceId;
		esac;
		next(nfDiscoveryRequest.targetPlmns) := case
			(initConsumer & adversaryPresent & adversaryDiscoveryRequest) : 0..5;
			(sendDiscReq_Direct_specProducer_init) : {0, producer1.plmns[1], producer1.plmns[2], producer2.plmns[1], producer2.plmns[2]};
			(sendDiscReq_Direct_specProducer_update) : {0, producer1.plmns[1], producer1.plmns[2], producer2.plmns[1], producer2.plmns[2]};
			(sendDiscReq_Direct_specNFType_init) : 0..5;
			(sendDiscReq_Direct_specNFType_update) : 0..5;
			TRUE: nfDiscoveryRequest.targetPlmns;
		esac;
		next(nfDiscoveryRequest.requesterPlmn) := case
			(initConsumer & adversaryPresent & adversaryDiscoveryRequest) : 0..5;
			(sendDiscReq_Direct_specProducer_init) : consumerPlmn;
			(sendDiscReq_Direct_specProducer_update) : consumerPlmn;
			(sendDiscReq_Direct_specNFType_init) : consumerPlmn;
			(sendDiscReq_Direct_specNFType_update) : consumerPlmn;
			TRUE: nfDiscoveryRequest.requesterPlmn;
		esac;

		---------- begin vNRFdiscReq next ----------
		next(vNRFdiscReq.requesterID) := case
			(modelParam.vNRFadvPresent & modelParam.vNRFadvDiscReq) : {none, 1, 2, 3, 4,5};
			(vNrfDiscoveryCheck) : nfDiscoveryRequest.requesterID;
			TRUE: none;
		esac;
		next(vNRFdiscReq.targetNFType) := case
			(modelParam.vNRFadvPresent & modelParam.vNRFadvDiscReq) : {none, nf_1, nf_2};
			(vNrfDiscoveryCheck) : nfDiscoveryRequest.targetNFType;
			TRUE: none;
		esac;
		next(vNRFdiscReq.requesterNFType) := case
			(modelParam.vNRFadvPresent & modelParam.vNRFadvDiscReq) : {none, nf_1, nf_2};
			(vNrfDiscoveryCheck) : nfDiscoveryRequest.requesterNFType;
			TRUE: none;
		esac;
		next(vNRFdiscReq.serviceName) := case
			(modelParam.vNRFadvPresent & modelParam.vNRFadvDiscReq) : {none, service_1, service_2};
			(vNrfDiscoveryCheck) : nfDiscoveryRequest.serviceName;
			TRUE: none;
		esac;
		next(vNRFdiscReq.targetNfInstanceId) := case
			(modelParam.vNRFadvPresent & modelParam.vNRFadvDiscReq) : {none, 1, 2, 3, 4,5};
			(vNrfDiscoveryCheck) : nfDiscoveryRequest.targetNfInstanceId;
			TRUE: none;
		esac;
		next(vNRFdiscReq.targetPlmns) := case
			(modelParam.vNRFadvPresent & modelParam.vNRFadvDiscReq) : 0..5;
			(vNrfDiscoveryCheck) : nfDiscoveryRequest.targetPlmns;
			TRUE: 0;
		esac;
		next(vNRFdiscReq.requesterPlmn) := case
			(modelParam.vNRFadvPresent & modelParam.vNRFadvDiscReq) : 0..5;
			(vNrfDiscoveryCheck) : nfDiscoveryRequest.requesterPlmn;
			TRUE: 0;
		esac;

		---------- begin producer init ----------
		init(producer.model_id) := 0;
		init(producer.nfInstanceId) := none;
		init(producer.nfType) := none;
		init(producer.plmns[1]) := 0;
		init(producer.plmns[2]) := 0;
		init(producer.allowedNFTypes[1]) := none;
		init(producer.allowedNFTypes[2]) := none;
		init(producer.allowedPlmns[1]) := 0;
		init(producer.allowedPlmns[2]) := 0;
		init(producer.nfService1.allowedNFTypes[1]) := none;
		init(producer.nfService1.allowedNFTypes[2]) := none;
		init(producer.nfService1.serviceName) := none;
		init(producer.nfService1.allowedPlmns[1]) := 0;
		init(producer.nfService1.allowedPlmns[2]) := 0;
		init(producer.nfService1.operation1.allowedNFInstances[1]) := none;
		init(producer.nfService1.operation1.allowedNFInstances[2]) := none;
		init(producer.nfService1.operation1.allowedNFTypes[1]) := none;
		init(producer.nfService1.operation1.allowedNFTypes[2]) := none;
		init(producer.nfService1.operation1.opName) := none;
		init(producer.nfService1.operation1.opScope1) := none;
		init(producer.nfService1.operation1.opScope2) := none;
		init(producer.nfService1.operation1.param1.isSensitive) := FALSE;
		init(producer.nfService1.operation1.param1.name) := none;
		init(producer.nfService1.operation1.param1.value) := 0;

		---------- begin producer next ----------
		next(producer.model_id) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.model_id;
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.model_id;
			(isNFDiscovered1) : producer1.model_id;
			(isNFDiscovered2) : producer2.model_id;
			(producer.model_id = producer1.model_id) : producer1.model_id;
			(producer.model_id = producer2.model_id) : producer2.model_id;
			TRUE : producer.model_id;
		esac;
		next(producer.nfInstanceId) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfInstanceId;
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfInstanceId;
			(isNFDiscovered1) : producer1.nfInstanceId;
			(isNFDiscovered2) : producer2.nfInstanceId;
			(producer.model_id = producer1.model_id) : producer1.nfInstanceId;
			(producer.model_id = producer2.model_id) : producer2.nfInstanceId;
			TRUE : producer.nfInstanceId;
		esac;
		next(producer.nfType) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfType;
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfType;
			(isNFDiscovered1) : producer1.nfType;
			(isNFDiscovered2) : producer2.nfType;
			(producer.model_id = producer1.model_id) : producer1.nfType;
			(producer.model_id = producer2.model_id) : producer2.nfType;
			TRUE : producer.nfType;
		esac;
		next(producer.plmns[1]) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.plmns[1];
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.plmns[1];
			(isNFDiscovered1) : producer1.plmns[1];
			(isNFDiscovered2) : producer2.plmns[1];
			(producer.model_id = producer1.model_id) : producer1.plmns[1];
			(producer.model_id = producer2.model_id) : producer2.plmns[1];
			TRUE : producer.plmns[1];
		esac;
		next(producer.plmns[2]) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.plmns[2];
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.plmns[2];
			(isNFDiscovered1) : producer1.plmns[2];
			(isNFDiscovered2) : producer2.plmns[2];
			(producer.model_id = producer1.model_id) : producer1.plmns[2];
			(producer.model_id = producer2.model_id) : producer2.plmns[2];
			TRUE : producer.plmns[2];
		esac;
		next(producer.allowedNFTypes[1]) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.allowedNFTypes[1];
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.allowedNFTypes[1];
			(isNFDiscovered1) : producer1.allowedNFTypes[1];
			(isNFDiscovered2) : producer2.allowedNFTypes[1];
			(producer.model_id = producer1.model_id) : producer1.allowedNFTypes[1];
			(producer.model_id = producer2.model_id) : producer2.allowedNFTypes[1];
			TRUE : producer.allowedNFTypes[1];
		esac;
		next(producer.allowedNFTypes[2]) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.allowedNFTypes[2];
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.allowedNFTypes[2];
			(isNFDiscovered1) : producer1.allowedNFTypes[2];
			(isNFDiscovered2) : producer2.allowedNFTypes[2];
			(producer.model_id = producer1.model_id) : producer1.allowedNFTypes[2];
			(producer.model_id = producer2.model_id) : producer2.allowedNFTypes[2];
			TRUE : producer.allowedNFTypes[2];
		esac;
		next(producer.allowedPlmns[1]) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.allowedPlmns[1];
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.allowedPlmns[1];
			(isNFDiscovered1) : producer1.allowedPlmns[1];
			(isNFDiscovered2) : producer2.allowedPlmns[1];
			(producer.model_id = producer1.model_id) : producer1.allowedPlmns[1];
			(producer.model_id = producer2.model_id) : producer2.allowedPlmns[1];
			TRUE : producer.allowedPlmns[1];
		esac;
		next(producer.allowedPlmns[2]) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.allowedPlmns[2];
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.allowedPlmns[2];
			(isNFDiscovered1) : producer1.allowedPlmns[2];
			(isNFDiscovered2) : producer2.allowedPlmns[2];
			(producer.model_id = producer1.model_id) : producer1.allowedPlmns[2];
			(producer.model_id = producer2.model_id) : producer2.allowedPlmns[2];
			TRUE : producer.allowedPlmns[2];
		esac;
		next(producer.nfService1.allowedNFTypes[1]) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.allowedNFTypes[1];
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.allowedNFTypes[1];
			(isNFDiscovered1) : producer1.nfService1.allowedNFTypes[1];
			(isNFDiscovered2) : producer2.nfService1.allowedNFTypes[1];
			(producer.model_id = producer1.model_id) : producer1.nfService1.allowedNFTypes[1];
			(producer.model_id = producer2.model_id) : producer2.nfService1.allowedNFTypes[1];
			TRUE : producer.nfService1.allowedNFTypes[1];
		esac;
		next(producer.nfService1.allowedNFTypes[2]) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.allowedNFTypes[2];
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.allowedNFTypes[2];
			(isNFDiscovered1) : producer1.nfService1.allowedNFTypes[2];
			(isNFDiscovered2) : producer2.nfService1.allowedNFTypes[2];
			(producer.model_id = producer1.model_id) : producer1.nfService1.allowedNFTypes[2];
			(producer.model_id = producer2.model_id) : producer2.nfService1.allowedNFTypes[2];
			TRUE : producer.nfService1.allowedNFTypes[2];
		esac;
		next(producer.nfService1.serviceName) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.serviceName;
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.serviceName;
			(isNFDiscovered1) : producer1.nfService1.serviceName;
			(isNFDiscovered2) : producer2.nfService1.serviceName;
			(producer.model_id = producer1.model_id) : producer1.nfService1.serviceName;
			(producer.model_id = producer2.model_id) : producer2.nfService1.serviceName;
			TRUE : producer.nfService1.serviceName;
		esac;
		next(producer.nfService1.allowedPlmns[1]) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.allowedPlmns[1];
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.allowedPlmns[1];
			(isNFDiscovered1) : producer1.nfService1.allowedPlmns[1];
			(isNFDiscovered2) : producer2.nfService1.allowedPlmns[1];
			(producer.model_id = producer1.model_id) : producer1.nfService1.allowedPlmns[1];
			(producer.model_id = producer2.model_id) : producer2.nfService1.allowedPlmns[1];
			TRUE : producer.nfService1.allowedPlmns[1];
		esac;
		next(producer.nfService1.allowedPlmns[2]) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.allowedPlmns[2];
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.allowedPlmns[2];
			(isNFDiscovered1) : producer1.nfService1.allowedPlmns[2];
			(isNFDiscovered2) : producer2.nfService1.allowedPlmns[2];
			(producer.model_id = producer1.model_id) : producer1.nfService1.allowedPlmns[2];
			(producer.model_id = producer2.model_id) : producer2.nfService1.allowedPlmns[2];
			TRUE : producer.nfService1.allowedPlmns[2];
		esac;
		next(producer.nfService1.operation1.allowedNFInstances[1]) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.allowedNFInstances[1];
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.allowedNFInstances[1];
			(isNFDiscovered1) : producer1.nfService1.operation1.allowedNFInstances[1];
			(isNFDiscovered2) : producer2.nfService1.operation1.allowedNFInstances[1];
			(producer.model_id = producer1.model_id) : producer1.nfService1.operation1.allowedNFInstances[1];
			(producer.model_id = producer2.model_id) : producer2.nfService1.operation1.allowedNFInstances[1];
			TRUE : producer.nfService1.operation1.allowedNFInstances[1];
		esac;
		next(producer.nfService1.operation1.allowedNFInstances[2]) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.allowedNFInstances[2];
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.allowedNFInstances[2];
			(isNFDiscovered1) : producer1.nfService1.operation1.allowedNFInstances[2];
			(isNFDiscovered2) : producer2.nfService1.operation1.allowedNFInstances[2];
			(producer.model_id = producer1.model_id) : producer1.nfService1.operation1.allowedNFInstances[2];
			(producer.model_id = producer2.model_id) : producer2.nfService1.operation1.allowedNFInstances[2];
			TRUE : producer.nfService1.operation1.allowedNFInstances[2];
		esac;
		next(producer.nfService1.operation1.allowedNFTypes[1]) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.allowedNFTypes[1];
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.allowedNFTypes[1];
			(isNFDiscovered1) : producer1.nfService1.operation1.allowedNFTypes[1];
			(isNFDiscovered2) : producer2.nfService1.operation1.allowedNFTypes[1];
			(producer.model_id = producer1.model_id) : producer1.nfService1.operation1.allowedNFTypes[1];
			(producer.model_id = producer2.model_id) : producer2.nfService1.operation1.allowedNFTypes[1];
			TRUE : producer.nfService1.operation1.allowedNFTypes[1];
		esac;
		next(producer.nfService1.operation1.allowedNFTypes[2]) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.allowedNFTypes[2];
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.allowedNFTypes[2];
			(isNFDiscovered1) : producer1.nfService1.operation1.allowedNFTypes[2];
			(isNFDiscovered2) : producer2.nfService1.operation1.allowedNFTypes[2];
			(producer.model_id = producer1.model_id) : producer1.nfService1.operation1.allowedNFTypes[2];
			(producer.model_id = producer2.model_id) : producer2.nfService1.operation1.allowedNFTypes[2];
			TRUE : producer.nfService1.operation1.allowedNFTypes[2];
		esac;
		next(producer.nfService1.operation1.opName) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.opName;
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.opName;
			(isNFDiscovered1) : producer1.nfService1.operation1.opName;
			(isNFDiscovered2) : producer2.nfService1.operation1.opName;
			(producer.model_id = producer1.model_id) : producer1.nfService1.operation1.opName;
			(producer.model_id = producer2.model_id) : producer2.nfService1.operation1.opName;
			TRUE : producer.nfService1.operation1.opName;
		esac;
		next(producer.nfService1.operation1.opScope1) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.opScope1;
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.opScope1;
			(isNFDiscovered1) : producer1.nfService1.operation1.opScope1;
			(isNFDiscovered2) : producer2.nfService1.operation1.opScope1;
			(producer.model_id = producer1.model_id) : producer1.nfService1.operation1.opScope1;
			(producer.model_id = producer2.model_id) : producer2.nfService1.operation1.opScope1;
			TRUE : producer.nfService1.operation1.opScope1;
		esac;
		next(producer.nfService1.operation1.opScope2) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.opScope2;
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.opScope2;
			(isNFDiscovered1) : producer1.nfService1.operation1.opScope2;
			(isNFDiscovered2) : producer2.nfService1.operation1.opScope2;
			(producer.model_id = producer1.model_id) : producer1.nfService1.operation1.opScope2;
			(producer.model_id = producer2.model_id) : producer2.nfService1.operation1.opScope2;
			TRUE : producer.nfService1.operation1.opScope2;
		esac;
		next(producer.nfService1.operation1.param1.isSensitive) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.param1.isSensitive;
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.param1.isSensitive;
			(isNFDiscovered1) : producer1.nfService1.operation1.param1.isSensitive;
			(isNFDiscovered2) : producer2.nfService1.operation1.param1.isSensitive;
			(producer.model_id = producer1.model_id) : producer1.nfService1.operation1.param1.isSensitive;
			(producer.model_id = producer2.model_id) : producer2.nfService1.operation1.param1.isSensitive;
			TRUE : producer.nfService1.operation1.param1.isSensitive;
		esac;
		next(producer.nfService1.operation1.param1.name) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.param1.name;
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.param1.name;
			(isNFDiscovered1) : producer1.nfService1.operation1.param1.name;
			(isNFDiscovered2) : producer2.nfService1.operation1.param1.name;
			(producer.model_id = producer1.model_id) : producer1.nfService1.operation1.param1.name;
			(producer.model_id = producer2.model_id) : producer2.nfService1.operation1.param1.name;
			TRUE : producer.nfService1.operation1.param1.name;
		esac;
		next(producer.nfService1.operation1.param1.value) := case 
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.param1.value;
			(isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.param1.value;
			(isNFDiscovered1) : producer1.nfService1.operation1.param1.value;
			(isNFDiscovered2) : producer2.nfService1.operation1.param1.value;
			(producer.model_id = producer1.model_id) : producer1.nfService1.operation1.param1.value;
			(producer.model_id = producer2.model_id) : producer2.nfService1.operation1.param1.value;
			TRUE : producer.nfService1.operation1.param1.value;
		esac;

		---------- begin prod_at_consumer init ----------
		init(prod_at_consumer.model_id) := 0;
		init(prod_at_consumer.nfInstanceId) := none;
		init(prod_at_consumer.nfType) := none;
		init(prod_at_consumer.plmns[1]) := 0;
		init(prod_at_consumer.plmns[2]) := 0;
		init(prod_at_consumer.allowedNFTypes[1]) := none;
		init(prod_at_consumer.allowedNFTypes[2]) := none;
		init(prod_at_consumer.allowedPlmns[1]) := 0;
		init(prod_at_consumer.allowedPlmns[2]) := 0;
		init(prod_at_consumer.nfService1.allowedNFTypes[1]) := none;
		init(prod_at_consumer.nfService1.allowedNFTypes[2]) := none;
		init(prod_at_consumer.nfService1.serviceName) := none;
		init(prod_at_consumer.nfService1.allowedPlmns[1]) := 0;
		init(prod_at_consumer.nfService1.allowedPlmns[2]) := 0;
		init(prod_at_consumer.nfService1.operation1.allowedNFInstances[1]) := none;
		init(prod_at_consumer.nfService1.operation1.allowedNFInstances[2]) := none;
		init(prod_at_consumer.nfService1.operation1.allowedNFTypes[1]) := none;
		init(prod_at_consumer.nfService1.operation1.allowedNFTypes[2]) := none;
		init(prod_at_consumer.nfService1.operation1.opName) := none;
		init(prod_at_consumer.nfService1.operation1.opScope1) := none;
		init(prod_at_consumer.nfService1.operation1.opScope2) := none;
		init(prod_at_consumer.nfService1.operation1.param1.isSensitive) := FALSE;
		init(prod_at_consumer.nfService1.operation1.param1.name) := none;
		init(prod_at_consumer.nfService1.operation1.param1.value) := 0;
		
		---------- begin prod_at_consumer next ----------
		/-- if (r = TRUE) -> prod_at_consumer = prod_at_vNR (+ vNRF adversary impact) 
			else if (r = FALSE) build from DR
		--/
		next(prod_at_consumer.model_id) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.model_id; -- prod_at_consumer might be invalid if vNRFadv interferes.
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.model_id;
			TRUE : prod_at_consumer.model_id;
		esac;
		next(prod_at_consumer.nfInstanceId) := case 
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {none, 1, 2, 3, 4,5}; -- prod_at_consumer might be invalid if vNRFadv interferes.
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfInstanceId;
			TRUE : prod_at_consumer.nfInstanceId;
		esac;
		next(prod_at_consumer.nfType) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {none, nf_1, nf_2};
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfType; 
			TRUE : prod_at_consumer.nfType;
		esac;
		next(prod_at_consumer.plmns[1]) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : 0..5;
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.plmns[1]; 
			TRUE : prod_at_consumer.plmns[1];
		esac;
		next(prod_at_consumer.plmns[2]) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : 0..5;
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.plmns[2]; 
			TRUE : prod_at_consumer.plmns[2];
		esac;
		next(prod_at_consumer.allowedNFTypes[1]) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {none, nf_1, nf_2};
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.allowedNFTypes[1]; 
			TRUE : prod_at_consumer.allowedNFTypes[1];
		esac;
		next(prod_at_consumer.allowedNFTypes[2]) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {none, nf_1, nf_2};
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.allowedNFTypes[2]; 
			TRUE : prod_at_consumer.allowedNFTypes[2];
		esac;
		next(prod_at_consumer.allowedPlmns[1]) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : 0..5;
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.allowedPlmns[1]; 
			TRUE : prod_at_consumer.allowedPlmns[1];
		esac;
		next(prod_at_consumer.allowedPlmns[2]) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : 0..5;
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.allowedPlmns[2]; 
			TRUE : prod_at_consumer.allowedPlmns[2];
		esac;
		next(prod_at_consumer.nfService1.allowedNFTypes[1]) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {none, nf_1, nf_2};
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfService1.allowedNFTypes[1]; 
			TRUE : prod_at_consumer.nfService1.allowedNFTypes[1];
		esac;
		next(prod_at_consumer.nfService1.allowedNFTypes[2]) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {none, nf_1, nf_2};
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfService1.allowedNFTypes[2]; 
			TRUE : prod_at_consumer.nfService1.allowedNFTypes[2];
		esac;
		next(prod_at_consumer.nfService1.serviceName) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {none, service_1, service_2};
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfService1.serviceName; 
			TRUE : prod_at_consumer.nfService1.serviceName;
		esac;
		next(prod_at_consumer.nfService1.allowedPlmns[1]) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : 0..5;
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfService1.allowedPlmns[1]; 
			TRUE : prod_at_consumer.nfService1.allowedPlmns[1];
		esac;
		next(prod_at_consumer.nfService1.allowedPlmns[2]) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : 0..5;
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfService1.allowedPlmns[2]; 
			TRUE : prod_at_consumer.nfService1.allowedPlmns[2];
		esac;
		next(prod_at_consumer.nfService1.operation1.allowedNFInstances[1]) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {none, 1, 2, 3, 4,5};
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfService1.operation1.allowedNFInstances[1]; 
			TRUE : prod_at_consumer.nfService1.operation1.allowedNFInstances[1];
		esac;
		next(prod_at_consumer.nfService1.operation1.allowedNFInstances[2]) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {none, 1, 2, 3, 4,5};
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfService1.operation1.allowedNFInstances[2]; 
			TRUE : prod_at_consumer.nfService1.operation1.allowedNFInstances[2];
		esac;
		next(prod_at_consumer.nfService1.operation1.allowedNFTypes[1]) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {none, nf_1, nf_2};
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfService1.operation1.allowedNFTypes[1]; 
			TRUE : prod_at_consumer.nfService1.operation1.allowedNFTypes[1];
		esac;
		next(prod_at_consumer.nfService1.operation1.allowedNFTypes[2]) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {none, nf_1, nf_2};
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfService1.operation1.allowedNFTypes[2]; 
			TRUE : prod_at_consumer.nfService1.operation1.allowedNFTypes[2];
		esac;
		next(prod_at_consumer.nfService1.operation1.opName) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {none, op_1, op_2};
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfService1.operation1.opName; 
			TRUE : prod_at_consumer.nfService1.operation1.opName;
		esac;
		next(prod_at_consumer.nfService1.operation1.opScope1) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {none, service_1, service_2};
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfService1.operation1.opScope1; 
			TRUE : prod_at_consumer.nfService1.operation1.opScope1;
		esac;
		next(prod_at_consumer.nfService1.operation1.opScope2) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {none, op_scope_1, op_scope_2};
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfService1.operation1.opScope2; 
			TRUE : prod_at_consumer.nfService1.operation1.opScope2;
		esac;
		next(prod_at_consumer.nfService1.operation1.param1.isSensitive) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {FALSE, TRUE};
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfService1.operation1.param1.isSensitive; 
			TRUE : prod_at_consumer.nfService1.operation1.param1.isSensitive;
		esac;
		next(prod_at_consumer.nfService1.operation1.param1.name) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : {none, p1, p2, p3, p4};
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfService1.operation1.param1.name; 
			TRUE : prod_at_consumer.nfService1.operation1.param1.name;
		esac;
		next(prod_at_consumer.nfService1.operation1.param1.value) := case
			(prod_at_vNRF.isNFInstanceValid & (modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : 0..2;
			(prod_at_vNRF.isNFInstanceValid & !(modelParam.vNRFadvPresent & modelParam.vNRFadvProdForward)) : prod_at_vNRF.nfService1.operation1.param1.value; 
			TRUE : prod_at_consumer.nfService1.operation1.param1.value;
		esac;

		---------- begin prod_at_vNRF init ----------
		init(prod_at_vNRF.model_id) := 0;
		init(prod_at_vNRF.nfInstanceId) := none;
		init(prod_at_vNRF.nfType) := none;
		init(prod_at_vNRF.plmns[1]) := 0;
		init(prod_at_vNRF.plmns[2]) := 0;
		init(prod_at_vNRF.allowedNFTypes[1]) := none;
		init(prod_at_vNRF.allowedNFTypes[2]) := none;
		init(prod_at_vNRF.allowedPlmns[1]) := 0;
		init(prod_at_vNRF.allowedPlmns[2]) := 0;
		init(prod_at_vNRF.nfService1.allowedNFTypes[1]) := none;
		init(prod_at_vNRF.nfService1.allowedNFTypes[2]) := none;
		init(prod_at_vNRF.nfService1.serviceName) := none;
		init(prod_at_vNRF.nfService1.allowedPlmns[1]) := 0;
		init(prod_at_vNRF.nfService1.allowedPlmns[2]) := 0;
		init(prod_at_vNRF.nfService1.operation1.allowedNFInstances[1]) := none;
		init(prod_at_vNRF.nfService1.operation1.allowedNFInstances[2]) := none;
		init(prod_at_vNRF.nfService1.operation1.allowedNFTypes[1]) := none;
		init(prod_at_vNRF.nfService1.operation1.allowedNFTypes[2]) := none;
		init(prod_at_vNRF.nfService1.operation1.opName) := none;
		init(prod_at_vNRF.nfService1.operation1.opScope1) := none;
		init(prod_at_vNRF.nfService1.operation1.opScope2) := none;
		init(prod_at_vNRF.nfService1.operation1.param1.isSensitive) := FALSE;
		init(prod_at_vNRF.nfService1.operation1.param1.name) := none;
		init(prod_at_vNRF.nfService1.operation1.param1.value) := 0;

		---------- begin prod_at_vNRF next ----------
		next(prod_at_vNRF.model_id) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1) : producer1.model_id;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2) : producer2.model_id;
			(hNrfIsNFDiscovered1) : producer1.model_id;
			(hNrfIsNFDiscovered2) : producer2.model_id;
			TRUE : prod_at_vNRF.model_id;
		esac;
		next(prod_at_vNRF.nfInstanceId) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1) : producer1.nfInstanceId;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2) : producer2.nfInstanceId;
			(hNrfIsNFDiscovered1) : producer1.nfInstanceId;
			(hNrfIsNFDiscovered2) : producer2.nfInstanceId;
			TRUE : prod_at_vNRF.nfInstanceId;
		esac;
		next(prod_at_vNRF.nfType) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1) : producer1.nfType;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2) : producer2.nfType;
			(hNrfIsNFDiscovered1) : producer1.nfType;
			(hNrfIsNFDiscovered2) : producer2.nfType;
			TRUE : prod_at_vNRF.nfType;
		esac;
		next(prod_at_vNRF.plmns[1]) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1) : producer1.plmns[1];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2) : producer2.plmns[1];
			(hNrfIsNFDiscovered1) : producer1.plmns[1];
			(hNrfIsNFDiscovered2) : producer2.plmns[1];
			TRUE : prod_at_vNRF.plmns[1];
		esac;
		next(prod_at_vNRF.plmns[2]) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1) : producer1.plmns[2];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2) : producer2.plmns[2];
			(hNrfIsNFDiscovered1) : producer1.plmns[2];
			(hNrfIsNFDiscovered2) : producer2.plmns[2];
			TRUE : prod_at_vNRF.plmns[2];
		esac;
		next(prod_at_vNRF.allowedNFTypes[1]) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1) : producer1.allowedNFTypes[1];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2) : producer2.allowedNFTypes[1];
			(hNrfIsNFDiscovered1) : producer1.allowedNFTypes[1];
			(hNrfIsNFDiscovered2) : producer2.allowedNFTypes[1];
			TRUE : prod_at_vNRF.allowedNFTypes[1];
		esac;
		next(prod_at_vNRF.allowedNFTypes[2]) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1) : producer1.allowedNFTypes[2];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2) : producer2.allowedNFTypes[2];
			(hNrfIsNFDiscovered1) : producer1.allowedNFTypes[2];
			(hNrfIsNFDiscovered2) : producer2.allowedNFTypes[2];
			TRUE : prod_at_vNRF.allowedNFTypes[2];
		esac;
		next(prod_at_vNRF.allowedPlmns[1]) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1) : producer1.allowedPlmns[1];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2) : producer2.allowedPlmns[1];
			(hNrfIsNFDiscovered1) : producer1.allowedPlmns[1];
			(hNrfIsNFDiscovered2) : producer2.allowedPlmns[1];
			TRUE : prod_at_vNRF.allowedPlmns[1];
		esac;
		next(prod_at_vNRF.allowedPlmns[2]) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1) : producer1.allowedPlmns[2];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2) : producer2.allowedPlmns[2];
			(hNrfIsNFDiscovered1) : producer1.allowedPlmns[2];
			(hNrfIsNFDiscovered2) : producer2.allowedPlmns[2];
			TRUE : prod_at_vNRF.allowedPlmns[2];
		esac;
		next(prod_at_vNRF.nfService1.allowedNFTypes[1]) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedNFTypes[1];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedNFTypes[1];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedNFTypes[1];
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedNFTypes[1];
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			TRUE : prod_at_vNRF.nfService1.allowedNFTypes[1];
		esac;
		next(prod_at_vNRF.nfService1.allowedNFTypes[2]) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedNFTypes[2];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedNFTypes[2];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedNFTypes[2];
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedNFTypes[2];
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			TRUE : prod_at_vNRF.nfService1.allowedNFTypes[2];
		esac;
		next(prod_at_vNRF.nfService1.serviceName) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.serviceName;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.serviceName;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.serviceName;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.serviceName;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			TRUE : prod_at_vNRF.nfService1.serviceName;
		esac;
		next(prod_at_vNRF.nfService1.allowedPlmns[1]) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedPlmns[1];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : 0;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedPlmns[1];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : 0;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedPlmns[1];
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : 0;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedPlmns[1];
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : 0;
			TRUE : prod_at_vNRF.nfService1.allowedPlmns[1];
		esac;
		next(prod_at_vNRF.nfService1.allowedPlmns[2]) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedPlmns[2];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : 0;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedPlmns[2];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : 0;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedPlmns[2];
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : 0;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedPlmns[2];
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : 0;
			TRUE : prod_at_vNRF.nfService1.allowedPlmns[2];
		esac;
		next(prod_at_vNRF.nfService1.operation1.allowedNFInstances[1]) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFInstances[1];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFInstances[1];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFInstances[1];
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFInstances[1];
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			TRUE : prod_at_vNRF.nfService1.operation1.allowedNFInstances[1];
		esac;
		next(prod_at_vNRF.nfService1.operation1.allowedNFInstances[2]) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFInstances[2];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFInstances[2];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFInstances[2];
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFInstances[2];
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			TRUE : prod_at_vNRF.nfService1.operation1.allowedNFInstances[2];
		esac;
		next(prod_at_vNRF.nfService1.operation1.allowedNFTypes[1]) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFTypes[1];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFTypes[1];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFTypes[1];
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFTypes[1];
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			TRUE : prod_at_vNRF.nfService1.operation1.allowedNFTypes[1];
		esac;
		next(prod_at_vNRF.nfService1.operation1.allowedNFTypes[2]) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFTypes[2];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFTypes[2];
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFTypes[2];
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFTypes[2];
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			TRUE : prod_at_vNRF.nfService1.operation1.allowedNFTypes[2];
		esac;
		next(prod_at_vNRF.nfService1.operation1.opName) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opName;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opName;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opName;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opName;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			TRUE : prod_at_vNRF.nfService1.operation1.opName;
		esac;
		next(prod_at_vNRF.nfService1.operation1.opScope1) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opScope1;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opScope1;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opScope1;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opScope1;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			TRUE : prod_at_vNRF.nfService1.operation1.opScope1;
		esac;
		next(prod_at_vNRF.nfService1.operation1.opScope2) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opScope2;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opScope2;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opScope2;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opScope2;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			TRUE : prod_at_vNRF.nfService1.operation1.opScope2;
		esac;
		next(prod_at_vNRF.nfService1.operation1.param1.isSensitive) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.isSensitive;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : FALSE;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.isSensitive;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : FALSE;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.isSensitive;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : FALSE;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.isSensitive;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : FALSE;
			TRUE : prod_at_vNRF.nfService1.operation1.param1.isSensitive;
		esac;
		next(prod_at_vNRF.nfService1.operation1.param1.name) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.name;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.name;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.name;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : none;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.name;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : none;
			TRUE : prod_at_vNRF.nfService1.operation1.param1.name;
		esac;
		next(prod_at_vNRF.nfService1.operation1.param1.value) := case 
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.value;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : 0;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.value;
			(hNrfIsNFDiscovered1 & hNrfIsNFDiscovered2 & vNrfSelectProducer = 2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : 0;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.value;
			(hNrfIsNFDiscovered1 & vNRFdiscReq.serviceName != producer1.nfService1.serviceName) : 0;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.value;
			(hNrfIsNFDiscovered2 & vNRFdiscReq.serviceName != producer2.nfService1.serviceName) : 0;
			TRUE : prod_at_vNRF.nfService1.operation1.param1.value;
		esac;

		---------- begin AccessToken next ----------
		/-- if (r = TRUE) -> accessToken = vNRFaccessToken (assuming no adversary impact and ATscp = AT and C2 not implemented) 
			else if (r = FALSE) -> build from accessTokenRequest
			
		--/
		next(accessToken.sub) := case
			vNRFaccessToken.isTokenValid : vNRFaccessToken.sub;
			TRUE : accessToken.sub;
		esac;
		next(accessToken.aud_NFInstanceId) := case
			vNRFaccessToken.isTokenValid : vNRFaccessToken.aud_NFInstanceId; 
			TRUE : accessToken.aud_NFInstanceId;
		esac;
		next(accessToken.aud_NFType) := case
			vNRFaccessToken.isTokenValid : vNRFaccessToken.aud_NFType; 
			TRUE : accessToken.aud_NFType;
		esac;
		next(accessToken.scopeService) := case
			vNRFaccessToken.isTokenValid : vNRFaccessToken.scopeService; 
			TRUE : accessToken.scopeService;
		esac;
		next(accessToken.scopeOperation) := case
			vNRFaccessToken.isTokenValid : vNRFaccessToken.scopeOperation; 
			TRUE : accessToken.scopeOperation;
		esac;
		next(accessToken.exp_) := case
			vNRFaccessToken.isTokenValid : vNRFaccessToken.exp_; 
			!(accessToken.exp_) : {TRUE, FALSE};
			TRUE : accessToken.exp_;
		esac;
		next(accessToken.consumerPlmn) := case
			vNRFaccessToken.isTokenValid : vNRFaccessToken.consumerPlmn; 
			TRUE : accessToken.consumerPlmn;
		esac;
		next(accessToken.producerPlmn) := case
			vNRFaccessToken.isTokenValid : vNRFaccessToken.producerPlmn; 
			TRUE : accessToken.producerPlmn;
		esac;

		---------- begin vNRFaccessToken next ----------
		next(vNRFaccessToken.sub) := case
			hNRFisAccessTokenReqAuthorized : vNRFaccessTokenReq.nfInstanceId;
			TRUE : vNRFaccessToken.sub;
		esac;
		next(vNRFaccessToken.aud_NFInstanceId) := case 
			hNRFisAccessTokenReqAuthorized & modelParam.atrType = specificProducer : vNRFaccessTokenReq.targetNfInstanceId;
			hNRFisAccessTokenReqAuthorized & modelParam.atrType = specificNFType : none;
			TRUE : vNRFaccessToken.aud_NFInstanceId;
		esac;
		next(vNRFaccessToken.aud_NFType) := case 
			hNRFisAccessTokenReqAuthorized & modelParam.atrType = specificProducer : none;
			hNRFisAccessTokenReqAuthorized & modelParam.atrType = specificNFType : vNRFaccessTokenReq.targetNFType;
			TRUE : vNRFaccessToken.aud_NFType;
		esac;
		next(vNRFaccessToken.scopeService) := case 
			hNRFisAccessTokenReqAuthorized : vNRFaccessTokenReq.scopeService;
			TRUE : vNRFaccessToken.scopeService;
		esac;
		next(vNRFaccessToken.scopeOperation) := case 
			hNRFisOpLevelATReqAuthorized: vNRFaccessTokenReq.scopeOperation;
			TRUE : vNRFaccessToken.scopeOperation;
		esac;
		next(vNRFaccessToken.exp_) := case 
			hNRFisAccessTokenReqAuthorized : FALSE;
			!(vNRFaccessToken.exp_) : {TRUE, FALSE}; -- nondeterministic
			TRUE : vNRFaccessToken.exp_;
		esac;
		next(vNRFaccessToken.consumerPlmn) := case 
			hNRFisAccessTokenReqAuthorized : vNRFaccessTokenReq.requesterPlmn;
			TRUE : vNRFaccessToken.consumerPlmn;
		esac;
		next(vNRFaccessToken.producerPlmn) := case 
			hNRFisAccessTokenReqAuthorized : vNRFaccessTokenReq.targetPlmn;
			TRUE : vNRFaccessToken.producerPlmn;
		esac;

		---------- begin AccessTokenRequest next ----------
		next(accessTokenRequest.nfInstanceId) := case
			(initConsumer & adversaryPresent & adversaryATRequest) : {none, 1, 2, 3, 4,5};
			(sendATReq_Direct_specProducer_init) : consumer.nfInstanceId;
			(sendATReq_Direct_specProducer_update) : consumer.nfInstanceId;
			(sendATReq_Direct_specNFType_init) : consumer.nfInstanceId;
			(sendATReq_Direct_specNFType_update) : consumer.nfInstanceId;
			TRUE: accessTokenRequest.nfInstanceId;
		esac;
		next(accessTokenRequest.scopeService) := case
			(initConsumer & adversaryPresent & adversaryATRequest) : {none, service_1, service_2};
			(sendATReq_Direct_specProducer_init) : {none, prod_at_consumer.nfService1.serviceName};
			(sendATReq_Direct_specProducer_update) : {none, prod_at_consumer.nfService1.serviceName};
			(sendATReq_Direct_specNFType_init) : {none, service_1, service_2};
			(sendATReq_Direct_specNFType_update) : {none, service_1, service_2};
			TRUE: accessTokenRequest.scopeService;
		esac;
		next(accessTokenRequest.scopeOperation) := case
			(initConsumer & adversaryPresent & adversaryATRequest) : {none, op_scope_1, op_scope_2};
			(sendATReq_Direct_specProducer_init) : {none, prod_at_consumer.nfService1.operation1.opScope2};
			(sendATReq_Direct_specProducer_update) : {none, prod_at_consumer.nfService1.operation1.opScope2};
			(sendATReq_Direct_specNFType_init) : {none, op_scope_1, op_scope_2};
			(sendATReq_Direct_specNFType_update) : {none, op_scope_1, op_scope_2};
			TRUE: accessTokenRequest.scopeOperation;
		esac;
		next(accessTokenRequest.targetNFType) := case
			(initConsumer & adversaryPresent & adversaryATRequest) : {none, nf_1, nf_2};
			(sendATReq_Direct_specProducer_init) : {none, nf_1, nf_2};
			(sendATReq_Direct_specProducer_update) : {none, nf_1, nf_2};
			(sendATReq_Direct_specNFType_init) : {none, nf_1, nf_2};
			(sendATReq_Direct_specNFType_update) : {none, nf_1, nf_2};
			TRUE: accessTokenRequest.targetNFType;
		esac;
		next(accessTokenRequest.targetNfInstanceId) := case
			(initConsumer & adversaryPresent & adversaryATRequest) : {none, 1, 2, 3, 4,5};
			(sendATReq_Direct_specProducer_init) : {none, prod_at_consumer.nfInstanceId};
			(sendATReq_Direct_specProducer_update) : {none, prod_at_consumer.nfInstanceId};
			(sendATReq_Direct_specNFType_init) : {none, prod_at_consumer.nfInstanceId};
			(sendATReq_Direct_specNFType_update) : {none, prod_at_consumer.nfInstanceId};
			TRUE: accessTokenRequest.targetNfInstanceId;
		esac;
		next(accessTokenRequest.targetPlmn) := case
			(initConsumer & adversaryPresent & adversaryATRequest) : 0..5;
			(sendATReq_Direct_specProducer_init) : 0..5;
			(sendATReq_Direct_specProducer_update) : 0..5;
			(sendATReq_Direct_specNFType_init) : 0..5;
			(sendATReq_Direct_specNFType_update) : 0..5;
			TRUE: accessTokenRequest.targetPlmn;
		esac;
		next(accessTokenRequest.requesterNFType) := case
			(initConsumer & adversaryPresent & adversaryATRequest) : {none, nf_1, nf_2};
			(sendATReq_Direct_specProducer_init) : {none, consumer.nfType};
			(sendATReq_Direct_specProducer_update) : {none, consumer.nfType};
			(sendATReq_Direct_specNFType_init) : {none, consumer.nfType};
			(sendATReq_Direct_specNFType_update) : {none, consumer.nfType};
			TRUE: accessTokenRequest.requesterNFType;
		esac;
		next(accessTokenRequest.requesterPlmn) := case
			(initConsumer & adversaryPresent & adversaryATRequest) : 0..5;
			(sendATReq_Direct_specProducer_init) : {0, consumerPlmn};
			(sendATReq_Direct_specProducer_update) : {0, consumerPlmn};
			(sendATReq_Direct_specNFType_init) : {0, consumerPlmn};
			(sendATReq_Direct_specNFType_update) : {0, consumerPlmn};
			TRUE: accessTokenRequest.requesterPlmn;
		esac;

		---------- begin vNRFdiscReq next ----------
		next(vNRFaccessTokenReq.nfInstanceId) := case
			(modelParam.vNRFadvPresent & modelParam.vNRFadvATReq) : {none, 1, 2, 3, 4,5};
			vNrfATRcheck : accessTokenRequest.nfInstanceId;
			TRUE: none;
		esac;
		next(vNRFaccessTokenReq.scopeService) := case
			(modelParam.vNRFadvPresent & modelParam.vNRFadvATReq) : {none, service_1, service_2};
			vNrfATRcheck : accessTokenRequest.scopeService;
			TRUE: none;
		esac;
		next(vNRFaccessTokenReq.scopeOperation) := case
			(modelParam.vNRFadvPresent & modelParam.vNRFadvATReq) : {none, op_scope_1, op_scope_2};
			vNrfATRcheck : accessTokenRequest.scopeOperation;
			TRUE: none;
		esac;
		next(vNRFaccessTokenReq.targetNFType) := case
			(modelParam.vNRFadvPresent & modelParam.vNRFadvATReq) : {none, nf_1, nf_2};
			vNrfATRcheck : accessTokenRequest.targetNFType;
			TRUE: none;
		esac;
		next(vNRFaccessTokenReq.targetNfInstanceId) := case
			(modelParam.vNRFadvPresent & modelParam.vNRFadvATReq) : {none, 1, 2, 3, 4,5};
			vNrfATRcheck : accessTokenRequest.targetNfInstanceId;
			TRUE: none;
		esac;
		next(vNRFaccessTokenReq.targetPlmn) := case
			(modelParam.vNRFadvPresent & modelParam.vNRFadvATReq) : 0..5;
			vNrfATRcheck : accessTokenRequest.targetPlmn;
			TRUE: 0;
		esac;
		next(vNRFaccessTokenReq.requesterNFType) := case
			(modelParam.vNRFadvPresent & modelParam.vNRFadvATReq) : {none, nf_1, nf_2};
			vNrfATRcheck : accessTokenRequest.requesterNFType;
			TRUE: none;
		esac;
		next(vNRFaccessTokenReq.requesterPlmn) := case
			(modelParam.vNRFadvPresent & modelParam.vNRFadvATReq) : 0..5;
			vNrfATRcheck : accessTokenRequest.requesterPlmn;
			TRUE: 0;
		esac;

		---------- begin ServiceRequest next ----------
		next(serviceRequest.subjectID) := case
			(sendServReq_Direct_adversary) : {none, 1, 2, 3, 4,5};
			(sendServReq_Direct_init) : consumer.nfInstanceId;
			(sendServReq_Direct_update) : consumer.nfInstanceId;
			TRUE: serviceRequest.subjectID;
		esac;
		next(serviceRequest.audienceID) := case
			(sendServReq_Direct_adversary) : {none, 1, 2, 3, 4,5};
			(sendServReq_Direct_init) : prod_at_consumer.nfInstanceId;
			(sendServReq_Direct_update) : prod_at_consumer.nfInstanceId;
			TRUE: serviceRequest.audienceID;
		esac;
		next(serviceRequest.service) := case
			(sendServReq_Direct_adversary) : {none, service_1, service_2};
			(sendServReq_Direct_init) : {none, prod_at_consumer.nfService1.serviceName};
			(sendServReq_Direct_update) : {none, prod_at_consumer.nfService1.serviceName};
			TRUE: serviceRequest.service;
		esac;
		next(serviceRequest.operation) := case
			(sendServReq_Direct_adversary) : {none, op_1, op_2};
			(sendServReq_Direct_init) : prod_at_consumer.nfService1.operation1.opName;
			(sendServReq_Direct_update) : prod_at_consumer.nfService1.operation1.opName;
			TRUE: serviceRequest.operation;
		esac;
		next(serviceRequest.param1.isSensitive) := case
			(sendServReq_Direct_adversary) : {TRUE, FALSE};
			(sendServReq_Direct_init) : prod_at_consumer.nfService1.operation1.param1.isSensitive;
			(sendServReq_Direct_update) : prod_at_consumer.nfService1.operation1.param1.isSensitive;
			TRUE: serviceRequest.param1.isSensitive;
		esac;
		next(serviceRequest.param1.name) := case
			(sendServReq_Direct_adversary) : {none, p1, p2, p3, p4};
			(sendServReq_Direct_init) : prod_at_consumer.nfService1.operation1.param1.name;
			(sendServReq_Direct_update) : prod_at_consumer.nfService1.operation1.param1.name;
			TRUE: serviceRequest.param1.name;
		esac;
		next(serviceRequest.param1.value) := case
			(sendServReq_Direct_adversary) : 0..2;
			(sendServReq_Direct_init) : prod_at_consumer.nfService1.operation1.param1.value;
			(sendServReq_Direct_update) : prod_at_consumer.nfService1.operation1.param1.value;
			TRUE: serviceRequest.param1.value;
		esac;